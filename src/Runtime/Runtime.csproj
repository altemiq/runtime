<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>net6.0;net5.0;netstandard2.0;netstandard1.6;net47;net451</TargetFrameworks>
    <RootNamespace Condition="$(RootNamespace.Contains('.Runtime'))">$(RootNamespace.Replace('.Runtime', ''))</RootNamespace>
    <PackageReadmeFile>README.md</PackageReadmeFile>
    <PolySharpIncludeRuntimeSupportedAttributes>true</PolySharpIncludeRuntimeSupportedAttributes>
    <PolySharpIncludeGeneratedTypes>System.Diagnostics.CodeAnalysis.MaybeNullAttribute;System.Diagnostics.CodeAnalysis.NotNullWhenAttribute;System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute</PolySharpIncludeGeneratedTypes>
  </PropertyGroup>

  <ItemGroup>
    <None Include="README.md" Pack="true" PackagePath="\" />
    <NuGetAuditSuppress Include="https://github.com/advisories/GHSA-5crp-9r3c-p9vr" />
    <NuGetAuditSuppress Include="https://github.com/advisories/GHSA-8g4q-xg66-9fp4" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.DotNet.PlatformAbstractions" Condition=" !$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net5.0')) " VersionOverride="3.0.0" />
    <PackageReference Include="PolySharp">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <Choose>
    <When Condition=" $([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netstandard2.0')) ">
      <ItemGroup>
        <PackageReference Include="Microsoft.Extensions.DependencyModel" VersionOverride="6.0.0" />
        <PackageReference Include="NuGet.Configuration" VersionOverride="5.6.0"  />
      </ItemGroup>
    </When>
    <Otherwise>
      <ItemGroup>
        <PackageReference Include="Microsoft.Extensions.DependencyModel" VersionOverride="5.0.0" />
        <PackageReference Include="NuGet.Configuration" VersionOverride="4.0.0"  />
        <PackageReference Include="NuGet.Frameworks" VersionOverride="4.0.0"  />
      </ItemGroup>
    </Otherwise>
  </Choose>

  <ItemGroup Condition=" !$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netstandard2.0')) ">
    <PackageReference Include="System.Net.Http" />
    <PackageReference Include="System.Text.RegularExpressions" />
  </ItemGroup>

  <ItemGroup Condition=" '$(SignAssembly)' != 'true' ">
    <InternalsVisibleTo Include="$(AssemblyName).Tests" />
  </ItemGroup>

  <UsingTask TaskName="GZip" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <Files ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <Result ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.IO" />
      <Using Namespace="System.IO.Compression" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
if (Files.Length > 0)
{
    Result = new TaskItem[Files.Length];
    for (var i = 0; i < Files.Length; i++)
    {
        var item = Files[i];
        var sourcePath = item.GetMetadata("FullPath");
        var sourceItemSpec = item.ItemSpec;

        var destinationSuffix = ".gz";
        var destinationPath = sourcePath + destinationSuffix;
        var destinationItemSpec = sourceItemSpec + destinationSuffix;

        if (!File.Exists(destinationItemSpec))
        {
            Log.LogMessage(MessageImportance.Normal, "EmbeddedResource Src : " + sourceItemSpec);

            using (var sourceStream = File.OpenRead(sourcePath))
            {
                using (var destinationStream = File.OpenWrite(destinationPath))
                {
                    using (var destinationGZip = new GZipStream(destinationStream, CompressionLevel.Optimal))
                    {
                        sourceStream.CopyTo(destinationGZip);
                    }
                }
            }
        }

        var destinationItem = new TaskItem(destinationItemSpec);
        item.CopyMetadataTo(destinationItem);

        Log.LogMessage(MessageImportance.Normal, "EmbeddedResource GZip: " + destinationItem.ItemSpec);

        Result[i] = destinationItem;
    }
}
]]>
      </Code>
    </Task>
  </UsingTask>

  <Target Name="_DownloadRuntimeJson" BeforeTargets="_ZipResources">
    <PropertyGroup>
      <_BaseSourceUrl>https://raw.githubusercontent.com/dotnet/runtime/main/src/libraries/Microsoft.NETCore.Platforms/src</_BaseSourceUrl>
    </PropertyGroup>
    <DownloadFile SourceUrl="$(_BaseSourceUrl)/runtime.json" DestinationFolder="$(IntermediateOutputPath)" SkipUnchangedFiles="True">
      <Output TaskParameter="DownloadedFile" ItemName="_RuntimeEmbeddedResource" />
    </DownloadFile>
    <DownloadFile SourceUrl="$(_BaseSourceUrl)/PortableRuntimeIdentifierGraph.json" DestinationFolder="$(IntermediateOutputPath)" SkipUnchangedFiles="True">
      <Output TaskParameter="DownloadedFile" ItemName="_RuntimeEmbeddedResource" />
    </DownloadFile>
    <ItemGroup>
      <_RuntimeEmbeddedResource>
        <LogicalName>$(RootNamespace).Runtime.%(Filename)%(Extension)</LogicalName>
      </_RuntimeEmbeddedResource>
      <EmbeddedResource Include="@(_RuntimeEmbeddedResource)" />
    </ItemGroup>
  </Target>

  <Target Name="_ZipResources" BeforeTargets="BeforeBuild">
    <GZip Files="@(EmbeddedResource)">
      <Output ItemName="GZipEmbeddedResource" TaskParameter="Result" />
    </GZip>
    <Message Text="Source EmbeddedResources: @(EmbeddedResource)" />
    <Message Text="GZipped EmbeddedResources: @(GZipEmbeddedResource)" />
    <ItemGroup>
      <GZipEmbeddedResource>
        <LogicalName>%(LogicalName).gz</LogicalName>
      </GZipEmbeddedResource>
      <EmbeddedResource Remove="@(EmbeddedResource)" />
      <EmbeddedResource Include="@(GZipEmbeddedResource)" />
    </ItemGroup>
  </Target>

</Project>
