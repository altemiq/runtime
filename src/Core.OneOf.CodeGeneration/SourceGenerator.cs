// -----------------------------------------------------------------------
// <copyright file="SourceGenerator.cs" company="Altemiq">
// Copyright (c) Altemiq. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

namespace Altemiq.OneOf.CodeGeneration;

using Humanizer;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

/// <summary>
/// The source generator.
/// </summary>
[Generator]
public class SourceGenerator : ISourceGenerator
{
    private const string OneOf = "OneOf";
    private const string ResultsTypeParameter = "TResult";
    private const string IndexPropertyName = "Index";
    private const string IndexVariableName = "index";
    private const string ValuePropertyName = "Value";
    private const string ValueVariableName = "value";
    private const string TVariableName = "t";
    private const string LeftVariableName = "left";
    private const string RightVariableName = "right";
    private const string OtherVariableName = "other";

    /// <inheritdoc/>
    public void Execute(GeneratorExecutionContext context)
    {
        const int Count = 10;

        for (int i = 0; i < Count; i++)
        {
            Add(GenerateOneOfGeneric(i + 1), ref context);
        }

        Add(GenerateOneOf(Count), ref context);

        static void Add((string Name, MemberDeclarationSyntax Declaration) member, ref GeneratorExecutionContext context)
        {
            var sourceText = InNamespace(member.Declaration).NormalizeWhitespace().GetText(System.Text.Encoding.UTF8);
            context.AddSource(member.Name + ".cs", sourceText);
        }

        static BaseNamespaceDeclarationSyntax InNamespace(MemberDeclarationSyntax member)
        {
            return FileScopedNamespaceDeclaration(ParseName("Altemiq"))
                .AddMembers(member)
                .WithLeadingTrivia(TriviaList(Comment("// <autogenerated />")));
        }
    }

    /// <inheritdoc/>
    public void Initialize(GeneratorInitializationContext context)
    {
        // this is required to be implemented
    }

    private static (string Name, ClassDeclarationSyntax ClassDeclaration) GenerateOneOf(int count)
    {
        var classDeclaraion = ClassDeclaration(OneOf)
            .WithModifiers(
            TokenList(
                Token(SyntaxKind.PublicKeyword),
                Token(SyntaxKind.StaticKeyword)))
            .WithLeadingTrivia(
            Trivia(
                DocumentationCommentTrivia(
                    SyntaxKind.SingleLineDocumentationCommentTrivia,
                    List(
                        new XmlNodeSyntax[]
                        {
                            XmlText()
                            .WithTextTokens(
                                TokenList(
                                    XmlTextLiteral(
                                        TriviaList(
                                            DocumentationCommentExterior("///")),
                                        " ",
                                        " ",
                                        TriviaList()))),
                            XmlExampleElement(
                                XmlText()
                                .WithTextTokens(
                                    TokenList(
                                        XmlTextNewLine(
                                            TriviaList(),
                                            Environment.NewLine,
                                            Environment.NewLine,
                                            TriviaList()),
                                        XmlTextLiteral(
                                            TriviaList(
                                                DocumentationCommentExterior("///")),
                                            " ",
                                            " ",
                                            TriviaList()))),
                                XmlNullKeywordElement()
                                .WithAttributes(
                                    SingletonList<XmlAttributeSyntax>(
                                        XmlCrefAttribute(
                                            NameMemberCref(
                                                IdentifierName($"I{OneOf}"))))),
                                XmlText()
                                .WithTextTokens(
                                    TokenList(
                                        XmlTextLiteral(
                                            TriviaList(),
                                            " methods.",
                                            " methods.",
                                            TriviaList()),
                                        XmlTextNewLine(
                                            TriviaList(),
                                            Environment.NewLine,
                                            Environment.NewLine,
                                            TriviaList()),
                                        XmlTextLiteral(
                                            TriviaList(
                                                DocumentationCommentExterior("///")),
                                            " ",
                                            " ",
                                            TriviaList()))))
                            .WithStartTag(
                                XmlElementStartTag(
                                    XmlName(
                                        Identifier("summary"))))
                            .WithEndTag(
                                XmlElementEndTag(
                                    XmlName(
                                        Identifier("summary")))),
                            XmlText()
                            .WithTextTokens(
                                TokenList(
                                    XmlTextNewLine(
                                        TriviaList(),
                                        Environment.NewLine,
                                        Environment.NewLine,
                                        TriviaList()))),
                        }))))
            .WithMembers(List(GetMemberDeclarations(count)
                .Append(GetNoneStructDeclaration(count))));

        return (OneOf, classDeclaraion);

        static IEnumerable<MemberDeclarationSyntax> GetMemberDeclarations(int count)
        {
            static IEnumerable<TypeSyntax> GetTypes(int count)
            {
                return GetTypeParameterNames(count).Select(IdentifierName);
            }

            for (int i = 0; i < count; i++)
            {
                foreach (var declaration in GetSubMemberDeclarations(i + 1))
                {
                    yield return declaration;
                }

                static IEnumerable<MemberDeclarationSyntax> GetSubMemberDeclarations(int count)
                {
                    for (var i = 0; i < count; i++)
                    {
                        const string InputVariableName = "input";

                        yield return MethodDeclaration(
                            GenericName(
                                Identifier(OneOf))
                            .WithTypeArgumentList(
                                TypeArgumentList(
                                    SeparatedList<TypeSyntax>(Join(GetTypes(count))))),
                            Identifier("From"))
                        .WithModifiers(
                            TokenList(
                                Token(SyntaxKind.PublicKeyword),
                                Token(SyntaxKind.StaticKeyword)))
                        .WithTypeParameterList(
                            TypeParameterList(
                                SeparatedList<TypeParameterSyntax>(
                                    Join(GetTypeParameterNames(count).Select(TypeParameter)))))
                        .WithParameterList(
                            ParameterList(
                                SingletonSeparatedList(
                                    Parameter(
                                        Identifier(InputVariableName))
                                    .WithType(
                                        IdentifierName(GetTypeParameterName(i))))))
                        .WithExpressionBody(
                            ArrowExpressionClause(
                                IdentifierName(InputVariableName)))
                        .WithSemicolonToken(
                            Token(SyntaxKind.SemicolonToken))
                        .WithLeadingTrivia(
                            Trivia(
                                DocumentationCommentTrivia(
                                    SyntaxKind.SingleLineDocumentationCommentTrivia,
                                    List(GetDocumentation(i, count)))));

                        static IEnumerable<XmlNodeSyntax> GetDocumentation(int index, int count)
                        {
                            yield return XmlText()
                            .WithTextTokens(
                                TokenList(
                                    XmlTextLiteral(
                                        TriviaList(
                                            DocumentationCommentExterior("///")),
                                        " ",
                                        " ",
                                        TriviaList())));
                            yield return XmlExampleElement(
                                XmlText()
                                .WithTextTokens(
                                    TokenList(
                                        XmlTextNewLine(
                                            TriviaList(),
                                            Environment.NewLine,
                                            Environment.NewLine,
                                            TriviaList()),
                                        XmlTextLiteral(
                                            TriviaList(
                                                DocumentationCommentExterior("    ///")),
                                            " Converts a ",
                                            " Converts a ",
                                            TriviaList()))),
                                XmlNullKeywordElement()
                                .WithName(
                                    XmlName(
                                        Identifier("typeparamref")))
                                .WithAttributes(
                                    SingletonList<XmlAttributeSyntax>(
                                        XmlNameAttribute(
                                            XmlName(
                                                Identifier("name")),
                                            Token(SyntaxKind.DoubleQuoteToken),
                                            IdentifierName(GetTypeParameterName(index)),
                                            Token(SyntaxKind.DoubleQuoteToken)))),
                                XmlText()
                                .WithTextTokens(
                                    TokenList(
                                        XmlTextLiteral(
                                            TriviaList(),
                                            " to a ",
                                            " to a ",
                                            TriviaList()))),
                                XmlNullKeywordElement()
                                .WithAttributes(
                                    SingletonList<XmlAttributeSyntax>(
                                        XmlCrefAttribute(
                                            NameMemberCref(
                                                GenericName(
                                                    Identifier(OneOf))
                                                .WithTypeArgumentList(
                                                    TypeArgumentList(
                                                        SeparatedList<TypeSyntax>(
                                                            Join(GetTypes(count))))))))),
                                XmlText()
                                .WithTextTokens(
                                    TokenList(
                                        XmlTextLiteral(
                                            TriviaList(),
                                            ".",
                                            ".",
                                            TriviaList()),
                                        XmlTextNewLine(
                                            TriviaList(),
                                            Environment.NewLine,
                                            Environment.NewLine,
                                            TriviaList()),
                                        XmlTextLiteral(
                                            TriviaList(
                                                DocumentationCommentExterior("    ///")),
                                            " ",
                                            " ",
                                            TriviaList()))))
                            .WithStartTag(
                                XmlElementStartTag(
                                    XmlName(
                                        Identifier("summary"))))
                            .WithEndTag(
                                XmlElementEndTag(
                                    XmlName(
                                        Identifier("summary"))));
                            yield return XmlText()
                            .WithTextTokens(
                                TokenList(
                                    XmlTextNewLine(
                                        TriviaList(),
                                        Environment.NewLine,
                                        Environment.NewLine,
                                        TriviaList())));
                            for (int i = 0; i < count; i++)
                            {
                                var example = count == 1
                                    ? "The type parameter."
                                    : $"The {(i + 1).ToOrdinalWords()} type parameter.";

                                yield return XmlText()
                                .WithTextTokens(
                                    TokenList(
                                        XmlTextLiteral(
                                            TriviaList(
                                                DocumentationCommentExterior("    ///")),
                                            " ",
                                            " ",
                                            TriviaList())));
                                yield return XmlExampleElement(
                                    SingletonList<XmlNodeSyntax>(
                                        XmlText()
                                        .WithTextTokens(
                                            TokenList(
                                                XmlTextLiteral(
                                                    TriviaList(),
                                                    example,
                                                    example,
                                                    TriviaList())))))
                                .WithStartTag(
                                    XmlElementStartTag(
                                        XmlName(
                                            Identifier("typeparam")))
                                    .WithAttributes(
                                        SingletonList<XmlAttributeSyntax>(
                                            XmlNameAttribute(
                                                XmlName(
                                                    Identifier("name")),
                                                Token(SyntaxKind.DoubleQuoteToken),
                                                IdentifierName(GetTypeParameterName(index)),
                                                Token(SyntaxKind.DoubleQuoteToken)))))
                                .WithEndTag(
                                    XmlElementEndTag(
                                        XmlName(
                                            Identifier("typeparam"))));
                                yield return XmlText()
                                .WithTextTokens(
                                    TokenList(
                                        XmlTextNewLine(
                                            TriviaList(),
                                            Environment.NewLine,
                                            Environment.NewLine,
                                            TriviaList())));
                            }

                            yield return XmlText()
                            .WithTextTokens(
                                TokenList(
                                    XmlTextLiteral(
                                        TriviaList(
                                            DocumentationCommentExterior("    ///")),
                                        " ",
                                        " ",
                                        TriviaList())));
                            yield return XmlExampleElement(
                                SingletonList<XmlNodeSyntax>(
                                    XmlText()
                                    .WithTextTokens(
                                        TokenList(
                                            XmlTextLiteral(
                                                TriviaList(),
                                                "The value.",
                                                "The value.",
                                                TriviaList())))))
                            .WithStartTag(
                                XmlElementStartTag(
                                    XmlName(
                                        Identifier(
                                            TriviaList(),
                                            SyntaxKind.ParamKeyword,
                                            "param",
                                            "param",
                                            TriviaList())))
                                .WithAttributes(
                                    SingletonList<XmlAttributeSyntax>(
                                        XmlNameAttribute(
                                            XmlName(
                                                Identifier("name")),
                                            Token(SyntaxKind.DoubleQuoteToken),
                                            IdentifierName("input"),
                                            Token(SyntaxKind.DoubleQuoteToken)))))
                            .WithEndTag(
                                XmlElementEndTag(
                                    XmlName(
                                        Identifier(
                                            TriviaList(),
                                            SyntaxKind.ParamKeyword,
                                            "param",
                                            "param",
                                            TriviaList()))));
                            yield return XmlText()
                            .WithTextTokens(
                                TokenList(
                                    XmlTextNewLine(
                                        TriviaList(),
                                        Environment.NewLine,
                                        Environment.NewLine,
                                        TriviaList()),
                                    XmlTextLiteral(
                                        TriviaList(
                                            DocumentationCommentExterior("    ///")),
                                        " ",
                                        " ",
                                        TriviaList())));
                            yield return XmlExampleElement(
                                XmlText()
                                .WithTextTokens(
                                    TokenList(
                                        XmlTextLiteral(
                                            TriviaList(),
                                            "The ",
                                            "The ",
                                            TriviaList()))),
                                XmlNullKeywordElement()
                                .WithAttributes(
                                    SingletonList<XmlAttributeSyntax>(
                                        XmlCrefAttribute(
                                            NameMemberCref(
                                                GenericName(
                                                    Identifier(OneOf))
                                                .WithTypeArgumentList(
                                                    TypeArgumentList(
                                                        SeparatedList<TypeSyntax>(
                                                            Join(GetTypes(count))))))))),
                                XmlText()
                                .WithTextTokens(
                                    TokenList(
                                        XmlTextLiteral(
                                            TriviaList(),
                                            ".",
                                            ".",
                                            TriviaList()))))
                            .WithStartTag(
                                XmlElementStartTag(
                                    XmlName(
                                        Identifier("returns"))))
                            .WithEndTag(
                                XmlElementEndTag(
                                    XmlName(
                                        Identifier("returns"))));
                            yield return XmlText()
                            .WithTextTokens(
                                TokenList(
                                    XmlTextNewLine(
                                        TriviaList(),
                                        Environment.NewLine,
                                        Environment.NewLine,
                                        TriviaList())));
                        }
                    }
                }
            }
        }

        static StructDeclarationSyntax GetNoneStructDeclaration(int count)
        {
            const string None = nameof(None);

            return StructDeclaration(None)
                .WithModifiers(
                    TokenList(
                        Token(SyntaxKind.PublicKeyword),
                        Token(SyntaxKind.ReadOnlyKeyword)))
                .WithMembers(
                List(GetMemberDeclarations(count)))
                .WithLeadingTrivia(
                Trivia(
                    DocumentationCommentTrivia(
                            SyntaxKind.SingleLineDocumentationCommentTrivia,
                            List(
                                new XmlNodeSyntax[]
                                {
                                    XmlText()
                                    .WithTextTokens(
                                        TokenList(
                                            XmlTextLiteral(
                                                TriviaList(
                                                    DocumentationCommentExterior("///")),
                                                " ",
                                                " ",
                                                TriviaList()))),
                                    XmlExampleElement(
                                        SingletonList<XmlNodeSyntax>(
                                            XmlText()
                                            .WithTextTokens(
                                                TokenList(
                                                    XmlTextNewLine(
                                                        TriviaList(),
                                                        Environment.NewLine,
                                                        Environment.NewLine,
                                                        TriviaList()),
                                                    XmlTextLiteral(
                                                        TriviaList(
                                                            DocumentationCommentExterior("    ///")),
                                                        " Value of none.",
                                                        " Value of none.",
                                                        TriviaList()),
                                                    XmlTextNewLine(
                                                        TriviaList(),
                                                        Environment.NewLine,
                                                        Environment.NewLine,
                                                        TriviaList()),
                                                    XmlTextLiteral(
                                                        TriviaList(
                                                            DocumentationCommentExterior("    ///")),
                                                        " ",
                                                        " ",
                                                        TriviaList())))))
                                    .WithStartTag(
                                        XmlElementStartTag(
                                            XmlName(
                                                Identifier("summary"))))
                                    .WithEndTag(
                                        XmlElementEndTag(
                                            XmlName(
                                                Identifier("summary")))),
                                    XmlText()
                                    .WithTextTokens(
                                        TokenList(
                                            XmlTextNewLine(
                                                TriviaList(),
                                                Environment.NewLine,
                                                Environment.NewLine,
                                                TriviaList()))),
                                }))));

            static IEnumerable<MemberDeclarationSyntax> GetMemberDeclarations(int count)
            {
                for (int i = 1; i < count; i++)
                {
                    var typeParameterNames = GetTypeParameterNames(i);
                    var fullTypeParameterNames = typeParameterNames.Append(None);

                    yield return MethodDeclaration(
                        GenericName(
                            Identifier(OneOf))
                        .WithTypeArgumentList(
                            TypeArgumentList(
                                SeparatedList<TypeSyntax>(
                                    Join(fullTypeParameterNames.Select(IdentifierName))))),
                        Identifier("Of"))
                    .WithModifiers(
                        TokenList(
                            Token(SyntaxKind.PublicKeyword),
                            Token(SyntaxKind.StaticKeyword)))
                    .WithTypeParameterList(
                        TypeParameterList(
                            SeparatedList<TypeParameterSyntax>(
                                Join(typeParameterNames.Select(TypeParameter)))))
                    .WithExpressionBody(
                        ArrowExpressionClause(
                            DefaultExpression(
                                IdentifierName(None))))
                    .WithSemicolonToken(
                        Token(SyntaxKind.SemicolonToken))
                    .WithLeadingTrivia(
                        Trivia(
                            DocumentationCommentTrivia(
                                SyntaxKind.SingleLineDocumentationCommentTrivia,
                                List(GetDocumentation(i)))));

                    static IEnumerable<XmlNodeSyntax> GetDocumentation(int count)
                    {
                        var typeParameterNames = GetTypeParameterNames(count);
                        var fullTypeParameterNames = typeParameterNames.Append(None);

                        yield return XmlText()
                        .WithTextTokens(
                            TokenList(
                                XmlTextLiteral(
                                    TriviaList(
                                        DocumentationCommentExterior("///")),
                                    " ",
                                    " ",
                                    TriviaList())));
                        yield return XmlExampleElement(
                            XmlText()
                            .WithTextTokens(
                                TokenList(
                                    XmlTextNewLine(
                                        TriviaList(),
                                        Environment.NewLine,
                                        Environment.NewLine,
                                        TriviaList()),
                                    XmlTextLiteral(
                                        TriviaList(
                                            DocumentationCommentExterior("        ///")),
                                        " Creates a new instance of ",
                                        " Creates a new instance of ",
                                        TriviaList()))),
                            XmlNullKeywordElement()
                            .WithAttributes(
                                SingletonList<XmlAttributeSyntax>(
                                    XmlCrefAttribute(
                                        NameMemberCref(
                                            GenericName(
                                                Identifier(OneOf))
                                            .WithTypeArgumentList(
                                                TypeArgumentList(
                                                    SeparatedList<TypeSyntax>(
                                                        Join(fullTypeParameterNames.Select(IdentifierName))))))))),
                            XmlText()
                            .WithTextTokens(
                                TokenList(
                                    XmlTextLiteral(
                                        TriviaList(),
                                        " set to ",
                                        " set to ",
                                        TriviaList()))),
                            XmlNullKeywordElement()
                            .WithAttributes(
                                SingletonList<XmlAttributeSyntax>(
                                    XmlCrefAttribute(
                                        NameMemberCref(
                                            IdentifierName(None))))),
                            XmlText()
                            .WithTextTokens(
                                TokenList(
                                    XmlTextLiteral(
                                        TriviaList(),
                                        ".",
                                        ".",
                                        TriviaList()),
                                    XmlTextNewLine(
                                        TriviaList(),
                                        Environment.NewLine,
                                        Environment.NewLine,
                                        TriviaList()),
                                    XmlTextLiteral(
                                        TriviaList(
                                            DocumentationCommentExterior("        ///")),
                                        " ",
                                        " ",
                                        TriviaList()))))
                        .WithStartTag(
                            XmlElementStartTag(
                                XmlName(
                                    Identifier("summary"))))
                        .WithEndTag(
                            XmlElementEndTag(
                                XmlName(
                                    Identifier("summary"))));
                        yield return XmlText()
                        .WithTextTokens(
                            TokenList(
                                XmlTextNewLine(
                                    TriviaList(),
                                    Environment.NewLine,
                                    Environment.NewLine,
                                    TriviaList())));
                        for (int i = 0; i < count; i++)
                        {
                            var example = count == 1
                                ? "The type in the "
                                : $"The {(i + 1).ToOrdinalWords()} type in the ";

                            yield return XmlText()
                            .WithTextTokens(
                                TokenList(
                                    XmlTextLiteral(
                                        TriviaList(
                                            DocumentationCommentExterior("        ///")),
                                        " ",
                                        " ",
                                        TriviaList())));
                            yield return XmlExampleElement(
                                XmlText()
                                .WithTextTokens(
                                    TokenList(
                                        XmlTextLiteral(
                                            TriviaList(),
                                            example,
                                            example,
                                            TriviaList()))),
                                XmlNullKeywordElement()
                                .WithAttributes(
                                    SingletonList<XmlAttributeSyntax>(
                                        XmlCrefAttribute(
                                            NameMemberCref(
                                                GenericName(
                                                    Identifier(OneOf))
                                                .WithTypeArgumentList(
                                                    TypeArgumentList(
                                                        SeparatedList<TypeSyntax>(
                                                            Join(fullTypeParameterNames.Select(IdentifierName))))))))),
                                XmlText()
                                .WithTextTokens(
                                    TokenList(
                                        XmlTextLiteral(
                                            TriviaList(),
                                            ".",
                                            ".",
                                            TriviaList()))))
                            .WithStartTag(
                                XmlElementStartTag(
                                    XmlName(
                                        Identifier("typeparam")))
                                .WithAttributes(
                                    SingletonList<XmlAttributeSyntax>(
                                        XmlNameAttribute(
                                            XmlName(
                                                Identifier("name")),
                                            Token(SyntaxKind.DoubleQuoteToken),
                                            IdentifierName(GetTypeParameterName(i)),
                                            Token(SyntaxKind.DoubleQuoteToken)))))
                            .WithEndTag(
                                XmlElementEndTag(
                                    XmlName(
                                        Identifier("typeparam"))));
                            yield return XmlText()
                            .WithTextTokens(
                                TokenList(
                                    XmlTextNewLine(
                                        TriviaList(),
                                        Environment.NewLine,
                                        Environment.NewLine,
                                        TriviaList())));
                        }

                        yield return XmlText()
                            .WithTextTokens(
                                TokenList(
                                    XmlTextLiteral(
                                        TriviaList(
                                            DocumentationCommentExterior("        ///")),
                                        " ",
                                        " ",
                                        TriviaList())));
                        yield return XmlExampleElement(
                            XmlText()
                            .WithTextTokens(
                                TokenList(
                                    XmlTextLiteral(
                                        TriviaList(),
                                        "The created instance ",
                                        "The created instance ",
                                        TriviaList()))),
                            XmlNullKeywordElement()
                            .WithAttributes(
                                SingletonList<XmlAttributeSyntax>(
                                    XmlCrefAttribute(
                                        NameMemberCref(
                                            GenericName(
                                                Identifier(OneOf))
                                            .WithTypeArgumentList(
                                                TypeArgumentList(
                                                    SeparatedList<TypeSyntax>(
                                                        Join(fullTypeParameterNames.Select(IdentifierName))))))))),
                            XmlText()
                            .WithTextTokens(
                                TokenList(
                                    XmlTextLiteral(
                                        TriviaList(),
                                        ".",
                                        ".",
                                        TriviaList()))))
                        .WithStartTag(
                            XmlElementStartTag(
                                XmlName(
                                    Identifier("returns"))))
                        .WithEndTag(
                            XmlElementEndTag(
                                XmlName(
                                    Identifier("returns"))));
                        yield return XmlText()
                        .WithTextTokens(
                            TokenList(
                                XmlTextNewLine(
                                    TriviaList(),
                                    Environment.NewLine,
                                    Environment.NewLine,
                                    TriviaList())));
                    }
                }
            }
        }
    }

    private static (string Name, StructDeclarationSyntax StructDeclaration) GenerateOneOfGeneric(int count)
    {
        var typeParameterNames = GetTypeParameterNames(count).ToArray();
        var name = FormattableString.Invariant($"{OneOf}`{count}");
        var typeParameters = GetTypeParameters(typeParameterNames);

        var structDeclaration = StructDeclaration(OneOf)
            .WithAttributeLists(SingletonList(
                AttributeList(
                    SingletonSeparatedList(
                        Attribute(
                            GetQualifiedName(typeof(System.Runtime.InteropServices.StructLayoutAttribute)))
                        .WithArgumentList(
                            AttributeArgumentList(
                                SingletonSeparatedList(
                                    AttributeArgument(
                                        GetMemberAccessExpression(System.Runtime.InteropServices.LayoutKind.Auto)))))))))
            .WithModifiers(
            TokenList(Token(SyntaxKind.PublicKeyword), Token(SyntaxKind.ReadOnlyKeyword)))
            .WithTypeParameterList(typeParameters)
            .WithBaseList(GetBaseList(typeParameterNames))
            .WithMembers(List(
                GetFieldDeclarations(typeParameterNames)
                .Append<MemberDeclarationSyntax>(GetConstructor(typeParameterNames))
                .Append(GetValuePropertyDeclaration(count))
                .Append(GetIndexPropertyDeclaration())
                .Concat(GetIsPropertyDeclarations(typeParameterNames))
                .Concat(GetAsPropertyDeclarations(typeParameterNames))
                .Concat(GetOperatorDeclarations(typeParameterNames))
                .Append(GetSwitchMethodDeclaration(typeParameterNames))
                .Append(GetMatchMethodDeclaration(typeParameterNames))
                .Concat(GetMapMethodDeclarations(typeParameterNames))
                .Concat(GetTryPickMethodDeclarations(typeParameterNames))
                .Concat(GetEqualsMethodDeclarations(typeParameterNames))
                .Append(GetToStringMethodDeclaration(typeParameterNames))
                .Append(GetGetHashCodeMethodDefinition(typeParameterNames))))
            .WithLeadingTrivia(
            Trivia(
                NullableDirectiveTrivia(
                    Token(SyntaxKind.EnableKeyword),
                    isActive: true)),
            Trivia(
                GetDocumentation(typeParameterNames)))
            .WithTrailingTrivia(
            Trivia(
                NullableDirectiveTrivia(
                    Token(SyntaxKind.RestoreKeyword),
                    isActive: true)));

        return (name, structDeclaration);

        static DocumentationCommentTriviaSyntax GetDocumentation(IList<string> typeParameterNames)
        {
            return DocumentationCommentTrivia(
                            SyntaxKind.SingleLineDocumentationCommentTrivia,
                            List(
                                GetXmlNodes(typeParameterNames)));

            static IEnumerable<XmlNodeSyntax> GetXmlNodes(IList<string> typeParameterNames)
            {
                var example = typeParameterNames.Count == 1
                    ? " Represents an option type with a single type."
                    : $" Represents an option type with {typeParameterNames.Count.ToWords()} types.";

                yield return XmlText()
                .WithTextTokens(
                    TokenList(
                        XmlTextLiteral(
                            TriviaList(
                                DocumentationCommentExterior("///")),
                            " ",
                            " ",
                            TriviaList())));
                yield return XmlExampleElement(
                    SingletonList<XmlNodeSyntax>(
                        XmlText()
                        .WithTextTokens(
                            TokenList(
                                XmlTextNewLine(
                                    TriviaList(),
                                    Environment.NewLine,
                                    Environment.NewLine,
                                    TriviaList()),
                                XmlTextLiteral(
                                    TriviaList(
                                        DocumentationCommentExterior("///")),
                                    example,
                                    example,
                                    TriviaList()),
                                XmlTextNewLine(
                                    TriviaList(),
                                    Environment.NewLine,
                                    Environment.NewLine,
                                    TriviaList()),
                                XmlTextLiteral(
                                    TriviaList(
                                        DocumentationCommentExterior("///")),
                                    " ",
                                    " ",
                                    TriviaList())))))
                .WithStartTag(
                    XmlElementStartTag(
                        XmlName(
                            Identifier("summary"))))
                .WithEndTag(
                    XmlElementEndTag(
                        XmlName(
                            Identifier("summary"))));
                yield return XmlText()
                .WithTextTokens(
                    TokenList(
                        XmlTextNewLine(
                            TriviaList(),
                            Environment.NewLine,
                            Environment.NewLine,
                            TriviaList())));
                for (int i = 0; i < typeParameterNames.Count; i++)
                {
                    var typeParameterExample = typeParameterNames.Count == 1
                        ? "The option type."
                        : $"The {(i + 1).ToOrdinalWords()} option type.";

                    yield return XmlText()
                    .WithTextTokens(
                        TokenList(
                            XmlTextLiteral(
                                TriviaList(
                                    DocumentationCommentExterior("///")),
                                " ",
                                " ",
                                TriviaList())));

                    yield return XmlExampleElement(
                        SingletonList<XmlNodeSyntax>(
                            XmlText()
                            .WithTextTokens(
                                TokenList(
                                    XmlTextLiteral(
                                        TriviaList(),
                                        typeParameterExample,
                                        typeParameterExample,
                                        TriviaList())))))
                    .WithStartTag(
                        XmlElementStartTag(
                            XmlName(
                                Identifier("typeparam")))
                        .WithAttributes(
                            SingletonList<XmlAttributeSyntax>(
                                XmlNameAttribute(
                                    XmlName(
                                        Identifier("name")),
                                    Token(SyntaxKind.DoubleQuoteToken),
                                    IdentifierName(typeParameterNames[i]),
                                    Token(SyntaxKind.DoubleQuoteToken)))))
                    .WithEndTag(
                        XmlElementEndTag(
                            XmlName(
                                Identifier("typeparam"))));

                    yield return XmlText()
                    .WithTextTokens(
                        TokenList(
                            XmlTextNewLine(
                                TriviaList(),
                                Environment.NewLine,
                                Environment.NewLine,
                                TriviaList())));
                }
            }
        }

        static TypeParameterListSyntax GetTypeParameters(IList<string> typeParameterNames)
        {
            return TypeParameterList(SeparatedList<TypeParameterSyntax>(Join(typeParameterNames.Select(TypeParameter))));
        }

        static BaseListSyntax GetBaseList(IList<string> typeParameterNames)
        {
            return BaseList(
                SeparatedList<BaseTypeSyntax>(
                    new SyntaxNodeOrToken[]
                    {
                        SimpleBaseType(
                            IdentifierName($"I{OneOf}")),
                        Token(SyntaxKind.CommaToken),
                        SimpleBaseType(
                            GenericName(
                                Identifier(nameof(IEquatable<object>)))
                            .WithTypeArgumentList(
                                TypeArgumentList(
                                    SingletonSeparatedList<TypeSyntax>(
                                        GenericName(
                                            Identifier(OneOf))
                                        .WithTypeArgumentList(
                                            GetTypeArgumentList(typeParameterNames)))))),
                    }));

            static TypeArgumentListSyntax GetTypeArgumentList(IList<string> typeParameterNames)
            {
                return TypeArgumentList(SeparatedList<TypeSyntax>(Join(typeParameterNames.Select(IdentifierName))));
            }
        }

        static IEnumerable<FieldDeclarationSyntax> GetFieldDeclarations(IList<string> typeParameterNames)
        {
            for (int i = 0; i < typeParameterNames.Count; i++)
            {
                yield return GetFieldDeclaration(typeParameterNames[i], i);
            }

            static FieldDeclarationSyntax GetFieldDeclaration(string typeParameterName, int number)
            {
                return FieldDeclaration(
                    VariableDeclaration(
                        NullableType(
                            IdentifierName(typeParameterName)))
                    .WithVariables(
                        SingletonSeparatedList(
                            VariableDeclarator(
                                Identifier(GetValueName(number))))))
                .WithModifiers(
                    TokenList(Token(SyntaxKind.PrivateKeyword), Token(SyntaxKind.ReadOnlyKeyword)));
            }
        }

        static ConstructorDeclarationSyntax GetConstructor(IList<string> typeParameterNames)
        {
            return ConstructorDeclaration(
                Identifier(OneOf))
            .WithModifiers(
                TokenList(
                    Token(SyntaxKind.PrivateKeyword)))
            .WithParameterList(
                ParameterList(
                    SeparatedList<ParameterSyntax>(Join(GetParameters(typeParameterNames)))))
            .WithBody(
                Block(GetAssignments(typeParameterNames.Count)));

            static IEnumerable<ParameterSyntax> GetParameters(IList<string> typeParameterNames)
            {
                yield return Parameter(Identifier(IndexVariableName)).WithType(PredefinedType(Token(SyntaxKind.IntKeyword)));

                for (int i = 0; i < typeParameterNames.Count; i++)
                {
                    yield return Parameter(
                        Identifier(GetValueName(i)))
                        .WithType(NullableType(IdentifierName(typeParameterNames[i])))
                        .WithDefault(EqualsValueClause(
                            LiteralExpression(
                                SyntaxKind.DefaultLiteralExpression,
                                Token(SyntaxKind.DefaultKeyword))));
                }
            }

            static IEnumerable<ExpressionStatementSyntax> GetAssignments(int count)
            {
                yield return ExpressionStatement(
                    AssignmentExpression(
                        SyntaxKind.SimpleAssignmentExpression,
                        MemberAccessExpression(
                            SyntaxKind.SimpleMemberAccessExpression,
                            ThisExpression(),
                            IdentifierName(IndexPropertyName)),
                        IdentifierName(IndexVariableName)));

                for (int i = 0; i < count; i++)
                {
                    var name = GetValueIdentifierName(i);
                    yield return ExpressionStatement(
                        AssignmentExpression(
                            SyntaxKind.SimpleAssignmentExpression,
                            MemberAccessExpression(
                                SyntaxKind.SimpleMemberAccessExpression,
                                ThisExpression(),
                                name),
                            name));
                }
            }
        }

        static PropertyDeclarationSyntax GetValuePropertyDeclaration(int count)
        {
            return PropertyDeclaration(
                NullableType(
                    PredefinedType(
                        Token(SyntaxKind.ObjectKeyword))),
                Identifier(ValuePropertyName))
                .WithModifiers(
                TokenList(
                    Token(
                        TriviaList(
                            Trivia(
                                DocumentationCommentTrivia(
                                    SyntaxKind.SingleLineDocumentationCommentTrivia,
                                    List(
                                        new XmlNodeSyntax[]
                                        {
                                            XmlText()
                                            .WithTextTokens(
                                                TokenList(
                                                    XmlTextLiteral(
                                                        TriviaList(
                                                            DocumentationCommentExterior("///")),
                                                        " ",
                                                        " ",
                                                        TriviaList()))),
                                            XmlEmptyElement("inheritdoc"),
                                            XmlText()
                                            .WithTextTokens(
                                                TokenList(
                                                    XmlTextNewLine(
                                                        TriviaList(),
                                                        Environment.NewLine,
                                                        Environment.NewLine,
                                                        TriviaList()))),
                                        })))),
                        SyntaxKind.PublicKeyword,
                        TriviaList())))
                .WithExpressionBody(
                    ArrowExpressionClause(GetSwitchExpression(count)))
                .WithSemicolonToken(
                    Token(SyntaxKind.SemicolonToken));

            static SwitchExpressionSyntax GetSwitchExpression(int count)
            {
                return SwitchExpression(
                            MemberAccessExpression(
                                SyntaxKind.SimpleMemberAccessExpression,
                                ThisExpression(),
                                IdentifierName(IndexPropertyName)))
                        .WithArms(
                            SeparatedList<SwitchExpressionArmSyntax>(GetSwitchExpressionArms(count)));

                static IEnumerable<SyntaxNodeOrToken> GetSwitchExpressionArms(int count)
                {
                    for (int i = 0; i < count; i++)
                    {
                        yield return SwitchExpressionArm(
                            ConstantPattern(
                                LiteralExpression(
                                    SyntaxKind.NumericLiteralExpression,
                                    Literal(i))),
                            MemberAccessExpression(
                                SyntaxKind.SimpleMemberAccessExpression,
                                ThisExpression(),
                                IdentifierName(GetValueName(i))));

                        yield return Token(SyntaxKind.CommaToken);
                    }

                    yield return SwitchExpressionArm(
                                        DiscardPattern(),
                                        ThrowExpression(
                                            ObjectCreationExpression(
                                                IdentifierName(nameof(InvalidOperationException)))
                                            .WithArgumentList(
                                                ArgumentList())));
                    yield return Token(SyntaxKind.CommaToken);
                }
            }
        }

        static PropertyDeclarationSyntax GetIndexPropertyDeclaration()
        {
            return PropertyDeclaration(
                PredefinedType(
                    Token(SyntaxKind.IntKeyword)),
                Identifier(IndexPropertyName))
                .WithModifiers(
                TokenList(
                    Token(
                        TriviaList(
                            Trivia(
                                DocumentationCommentTrivia(
                                    SyntaxKind.SingleLineDocumentationCommentTrivia,
                                    List(
                                        new XmlNodeSyntax[]
                                        {
                                            XmlText()
                                            .WithTextTokens(
                                                TokenList(
                                                    XmlTextLiteral(
                                                        TriviaList(
                                                            DocumentationCommentExterior("///")),
                                                        " ",
                                                        " ",
                                                        TriviaList()))),
                                            XmlEmptyElement("inheritdoc"),
                                            XmlText()
                                            .WithTextTokens(
                                                TokenList(
                                                    XmlTextNewLine(
                                                        TriviaList(),
                                                        Environment.NewLine,
                                                        Environment.NewLine,
                                                        TriviaList()))),
                                        })))),
                        SyntaxKind.PublicKeyword,
                        TriviaList())))
                .WithAccessorList(
                AccessorList(
                    SingletonList(
                        AccessorDeclaration(
                            SyntaxKind.GetAccessorDeclaration)
                        .WithSemicolonToken(
                            Token(SyntaxKind.SemicolonToken)))));
        }

        static IEnumerable<PropertyDeclarationSyntax> GetIsPropertyDeclarations(IList<string> typeParameterNames)
        {
            for (int i = 0; i < typeParameterNames.Count; i++)
            {
                yield return PropertyDeclaration(
                    PredefinedType(
                        Token(SyntaxKind.BoolKeyword)),
                    Identifier($"Is{typeParameterNames[i]}"))
                .WithModifiers(
                    TokenList(
                        Token(
                            TriviaList(
                                Trivia(
                                    DocumentationCommentTrivia(
                                        SyntaxKind.SingleLineDocumentationCommentTrivia,
                                        List(
                                            new XmlNodeSyntax[]
                                            {
                                                XmlText()
                                                .WithTextTokens(
                                                    TokenList(
                                                        XmlTextLiteral(
                                                            TriviaList(
                                                                DocumentationCommentExterior("///")),
                                                            " ",
                                                            " ",
                                                            TriviaList()))),
                                                XmlExampleElement(
                                                    XmlText()
                                                    .WithTextTokens(
                                                        TokenList(
                                                            XmlTextNewLine(
                                                                TriviaList(),
                                                                Environment.NewLine,
                                                                Environment.NewLine,
                                                                TriviaList()),
                                                            XmlTextLiteral(
                                                                TriviaList(
                                                                    DocumentationCommentExterior("    ///")),
                                                                " Gets a value indicating whether this instance contains a ",
                                                                " Gets a value indicating whether this instance contains a ",
                                                                TriviaList()))),
                                                    XmlNullKeywordElement()
                                                    .WithName(
                                                        XmlName(
                                                            Identifier("typeparamref")))
                                                    .WithAttributes(
                                                        SingletonList<XmlAttributeSyntax>(
                                                            XmlNameAttribute(
                                                                XmlName(
                                                                    Identifier("name")),
                                                                Token(SyntaxKind.DoubleQuoteToken),
                                                                IdentifierName(typeParameterNames[i]),
                                                                Token(SyntaxKind.DoubleQuoteToken)))),
                                                    XmlText()
                                                    .WithTextTokens(
                                                        TokenList(
                                                            XmlTextLiteral(
                                                                TriviaList(),
                                                                " value.",
                                                                " value.",
                                                                TriviaList()),
                                                            XmlTextNewLine(
                                                                TriviaList(),
                                                                Environment.NewLine,
                                                                Environment.NewLine,
                                                                TriviaList()),
                                                            XmlTextLiteral(
                                                                TriviaList(
                                                                    DocumentationCommentExterior("    ///")),
                                                                " ",
                                                                " ",
                                                                TriviaList()))))
                                                .WithStartTag(
                                                    XmlElementStartTag(
                                                        XmlName(
                                                            Identifier("summary"))))
                                                .WithEndTag(
                                                    XmlElementEndTag(
                                                        XmlName(
                                                            Identifier("summary")))),
                                                XmlText()
                                                .WithTextTokens(
                                                    TokenList(
                                                        XmlTextNewLine(
                                                            TriviaList(),
                                                            Environment.NewLine,
                                                            Environment.NewLine,
                                                            TriviaList()))),
                                            })))),
                            SyntaxKind.PublicKeyword,
                            TriviaList())))
                .WithExpressionBody(
                    ArrowExpressionClause(
                        BinaryExpression(
                            SyntaxKind.EqualsExpression,
                            MemberAccessExpression(
                                SyntaxKind.SimpleMemberAccessExpression,
                                ThisExpression(),
                                IdentifierName(IndexPropertyName)),
                            LiteralExpression(
                                SyntaxKind.NumericLiteralExpression,
                                Literal(i)))))
                .WithSemicolonToken(
                    Token(SyntaxKind.SemicolonToken));
            }
        }

        static IEnumerable<PropertyDeclarationSyntax> GetAsPropertyDeclarations(IList<string> typeParameterNames)
        {
            for (var i = 0; i < typeParameterNames.Count; i++)
            {
                yield return PropertyDeclaration(
                        NullableType(
                            IdentifierName(typeParameterNames[i])),
                        Identifier($"As{typeParameterNames[i]}"))
                    .WithModifiers(
                        TokenList(
                            Token(
                                TriviaList(
                                    Trivia(
                                        DocumentationCommentTrivia(
                                            SyntaxKind.SingleLineDocumentationCommentTrivia,
                                            List(
                                                new XmlNodeSyntax[]
                                                {
                                                    XmlText()
                                                    .WithTextTokens(
                                                        TokenList(
                                                            XmlTextLiteral(
                                                                TriviaList(
                                                                    DocumentationCommentExterior("///")),
                                                                " ",
                                                                " ",
                                                                TriviaList()))),
                                                    XmlExampleElement(
                                                        XmlText()
                                                        .WithTextTokens(
                                                            TokenList(
                                                                XmlTextNewLine(
                                                                    TriviaList(),
                                                                    Environment.NewLine,
                                                                    Environment.NewLine,
                                                                    TriviaList()),
                                                                XmlTextLiteral(
                                                                    TriviaList(
                                                                        DocumentationCommentExterior("    ///")),
                                                                    " Gets the value as a ",
                                                                    " Gets the value as a ",
                                                                    TriviaList()))),
                                                        XmlNullKeywordElement()
                                                        .WithName(
                                                            XmlName(
                                                                Identifier("typeparamref")))
                                                        .WithAttributes(
                                                            SingletonList<XmlAttributeSyntax>(
                                                                XmlNameAttribute(
                                                                    XmlName(
                                                                        Identifier("name")),
                                                                    Token(SyntaxKind.DoubleQuoteToken),
                                                                    IdentifierName(typeParameterNames[i]),
                                                                    Token(SyntaxKind.DoubleQuoteToken)))),
                                                        XmlText()
                                                        .WithTextTokens(
                                                            TokenList(
                                                                XmlTextLiteral(
                                                                    TriviaList(),
                                                                    " instance.",
                                                                    " instance.",
                                                                    TriviaList()),
                                                                XmlTextNewLine(
                                                                    TriviaList(),
                                                                    Environment.NewLine,
                                                                    Environment.NewLine,
                                                                    TriviaList()),
                                                                XmlTextLiteral(
                                                                    TriviaList(
                                                                        DocumentationCommentExterior("    ///")),
                                                                    " ",
                                                                    " ",
                                                                    TriviaList()))))
                                                    .WithStartTag(
                                                        XmlElementStartTag(
                                                            XmlName(
                                                                Identifier("summary"))))
                                                    .WithEndTag(
                                                        XmlElementEndTag(
                                                            XmlName(
                                                                Identifier("summary")))),
                                                    XmlText()
                                                    .WithTextTokens(
                                                        TokenList(
                                                            XmlTextNewLine(
                                                                TriviaList(),
                                                                Environment.NewLine,
                                                                Environment.NewLine,
                                                                TriviaList()))),
                                                })))),
                                SyntaxKind.PublicKeyword,
                                TriviaList())))
                    .WithExpressionBody(
                        ArrowExpressionClause(
                            ConditionalExpression(
                                MemberAccessExpression(
                                    SyntaxKind.SimpleMemberAccessExpression,
                                    ThisExpression(),
                                    IdentifierName($"Is{typeParameterNames[i]}")),
                                MemberAccessExpression(
                                    SyntaxKind.SimpleMemberAccessExpression,
                                    ThisExpression(),
                                    GetValueIdentifierName(i)),
                                ThrowExpression(
                                    ObjectCreationExpression(
                                        IdentifierName(nameof(InvalidOperationException)))
                                    .WithArgumentList(
                                        ArgumentList(
                                            SingletonSeparatedList(
                                                Argument(
                                                    InvocationExpression(
                                                        MemberAccessExpression(
                                                            SyntaxKind.SimpleMemberAccessExpression,
                                                            PredefinedType(
                                                                Token(SyntaxKind.StringKeyword)),
                                                            IdentifierName(nameof(string.Format))))
                                                    .WithArgumentList(
                                                        ArgumentList(
                                                            SeparatedList<ArgumentSyntax>(
                                                                new SyntaxNodeOrToken[]
                                                                {
                                                                    Argument(
                                                                        MemberAccessExpression(
                                                                            SyntaxKind.SimpleMemberAccessExpression,
                                                                            MemberAccessExpression(
                                                                                SyntaxKind.SimpleMemberAccessExpression,
                                                                                IdentifierName("Properties"),
                                                                                IdentifierName("Resources")),
                                                                            IdentifierName("Culture"))),
                                                                    Token(SyntaxKind.CommaToken),
                                                                    Argument(
                                                                        MemberAccessExpression(
                                                                            SyntaxKind.SimpleMemberAccessExpression,
                                                                            MemberAccessExpression(
                                                                                SyntaxKind.SimpleMemberAccessExpression,
                                                                                IdentifierName("Properties"),
                                                                                IdentifierName("Resources")),
                                                                            IdentifierName("CannotReturnAsType"))),
                                                                    Token(SyntaxKind.CommaToken),
                                                                    Argument(
                                                                        InvocationExpression(
                                                                            IdentifierName(
                                                                                Identifier(
                                                                                    TriviaList(),
                                                                                    SyntaxKind.NameOfKeyword,
                                                                                    "nameof",
                                                                                    "nameof",
                                                                                    TriviaList())))
                                                                        .WithArgumentList(
                                                                            ArgumentList(
                                                                                SingletonSeparatedList(
                                                                                    Argument(
                                                                                        IdentifierName(typeParameterNames[i])))))),
                                                                    Token(SyntaxKind.CommaToken),
                                                                    Argument(
                                                                        MemberAccessExpression(
                                                                            SyntaxKind.SimpleMemberAccessExpression,
                                                                            ThisExpression(),
                                                                            IdentifierName(IndexPropertyName))),
                                                                })))))))))))
                    .WithSemicolonToken(
                        Token(SyntaxKind.SemicolonToken));
            }
        }

        static IEnumerable<BaseMethodDeclarationSyntax> GetOperatorDeclarations(IList<string> typeParameterNames)
        {
            var genericName = GenericName(
                Identifier(OneOf))
            .WithTypeArgumentList(
                TypeArgumentList(
                    SeparatedList<TypeSyntax>(Join(typeParameterNames.Select(IdentifierName)))));

            for (int i = 0; i < typeParameterNames.Count; i++)
            {
                yield return ConversionOperatorDeclaration(
                    Token(SyntaxKind.ImplicitKeyword),
                    genericName)
                .WithModifiers(
                    TokenList(
                        Token(
                            TriviaList(
                                Trivia(
                                    DocumentationCommentTrivia(
                                        SyntaxKind.SingleLineDocumentationCommentTrivia,
                                        List(
                                            new XmlNodeSyntax[]
                                            {
                                                XmlText()
                                                .WithTextTokens(
                                                    TokenList(
                                                        XmlTextLiteral(
                                                            TriviaList(
                                                                DocumentationCommentExterior("///")),
                                                            " ",
                                                            " ",
                                                            TriviaList()))),
                                                XmlExampleElement(
                                                    XmlText()
                                                    .WithTextTokens(
                                                        TokenList(
                                                            XmlTextNewLine(
                                                                TriviaList(),
                                                                Environment.NewLine,
                                                                Environment.NewLine,
                                                                TriviaList()),
                                                            XmlTextLiteral(
                                                                TriviaList(
                                                                    DocumentationCommentExterior("    ///")),
                                                                " Converts an instance ",
                                                                " Converts an instance ",
                                                                TriviaList()))),
                                                    XmlNullKeywordElement()
                                                    .WithName(
                                                        XmlName(
                                                            Identifier("typeparamref")))
                                                    .WithAttributes(
                                                        SingletonList<XmlAttributeSyntax>(
                                                            XmlNameAttribute(
                                                                XmlName(
                                                                    Identifier("name")),
                                                                Token(SyntaxKind.DoubleQuoteToken),
                                                                IdentifierName(typeParameterNames[i]),
                                                                Token(SyntaxKind.DoubleQuoteToken)))),
                                                    XmlText()
                                                    .WithTextTokens(
                                                        TokenList(
                                                            XmlTextLiteral(
                                                                TriviaList(),
                                                                " to an instance of ",
                                                                " to an instance of ",
                                                                TriviaList()))),
                                                    XmlNullKeywordElement()
                                                    .WithAttributes(
                                                        SingletonList<XmlAttributeSyntax>(
                                                            XmlCrefAttribute(
                                                                NameMemberCref(
                                                                    GenericName(
                                                                        Identifier(OneOf))
                                                                    .WithTypeArgumentList(
                                                                        TypeArgumentList(
                                                                            SeparatedList<TypeSyntax>(Join(typeParameterNames.Select(IdentifierName))))))))),
                                                    XmlText()
                                                    .WithTextTokens(
                                                        TokenList(
                                                            XmlTextLiteral(
                                                                TriviaList(),
                                                                ".",
                                                                ".",
                                                                TriviaList()),
                                                            XmlTextNewLine(
                                                                TriviaList(),
                                                                Environment.NewLine,
                                                                Environment.NewLine,
                                                                TriviaList()),
                                                            XmlTextLiteral(
                                                                TriviaList(
                                                                    DocumentationCommentExterior("    ///")),
                                                                " ",
                                                                " ",
                                                                TriviaList()))))
                                                .WithStartTag(
                                                    XmlElementStartTag(
                                                        XmlName(
                                                            Identifier("summary"))))
                                                .WithEndTag(
                                                    XmlElementEndTag(
                                                        XmlName(
                                                            Identifier("summary")))),
                                                XmlText()
                                                .WithTextTokens(
                                                    TokenList(
                                                        XmlTextNewLine(
                                                            TriviaList(),
                                                            Environment.NewLine,
                                                            Environment.NewLine,
                                                            TriviaList()),
                                                        XmlTextLiteral(
                                                            TriviaList(
                                                                DocumentationCommentExterior("    ///")),
                                                            " ",
                                                            " ",
                                                            TriviaList()))),
                                                XmlExampleElement(
                                                    SingletonList<XmlNodeSyntax>(
                                                        XmlText()
                                                        .WithTextTokens(
                                                            TokenList(
                                                                XmlTextLiteral(
                                                                    TriviaList(),
                                                                    "The value.",
                                                                    "The value.",
                                                                    TriviaList())))))
                                                .WithStartTag(
                                                    XmlElementStartTag(
                                                        XmlName(
                                                            Identifier(
                                                                TriviaList(),
                                                                SyntaxKind.ParamKeyword,
                                                                "param",
                                                                "param",
                                                                TriviaList())))
                                                    .WithAttributes(
                                                        SingletonList<XmlAttributeSyntax>(
                                                            XmlNameAttribute(
                                                                XmlName(
                                                                    Identifier("name")),
                                                                Token(SyntaxKind.DoubleQuoteToken),
                                                                IdentifierName(TVariableName),
                                                                Token(SyntaxKind.DoubleQuoteToken)))))
                                                .WithEndTag(
                                                    XmlElementEndTag(
                                                        XmlName(
                                                            Identifier(
                                                                TriviaList(),
                                                                SyntaxKind.ParamKeyword,
                                                                "param",
                                                                "param",
                                                                TriviaList())))),
                                                XmlText()
                                                .WithTextTokens(
                                                    TokenList(
                                                        XmlTextNewLine(
                                                            TriviaList(),
                                                            Environment.NewLine,
                                                            Environment.NewLine,
                                                            TriviaList()))),
                                            })))),
                            SyntaxKind.PublicKeyword,
                            TriviaList()),
                        Token(SyntaxKind.StaticKeyword)))
                .WithParameterList(
                    ParameterList(
                        SingletonSeparatedList(
                            Parameter(
                                Identifier(TVariableName))
                            .WithType(
                                NullableType(
                                    IdentifierName(typeParameterNames[i]))))))
                .WithExpressionBody(
                    ArrowExpressionClause(
                        ImplicitObjectCreationExpression()
                        .WithArgumentList(
                            ArgumentList(
                                SeparatedList<ArgumentSyntax>(
                                    new SyntaxNodeOrToken[]
                                    {
                                        Argument(
                                            LiteralExpression(
                                                SyntaxKind.NumericLiteralExpression,
                                                Literal(i))),
                                        Token(SyntaxKind.CommaToken),
                                        Argument(
                                            IdentifierName(TVariableName))
                                        .WithNameColon(
                                            NameColon(
                                                IdentifierName(GetValueName(i)))),
                                    })))))
                .WithSemicolonToken(
                    Token(SyntaxKind.SemicolonToken));
            }

            // the equals
            yield return OperatorDeclaration(
                PredefinedType(
                    Token(SyntaxKind.BoolKeyword)),
                Token(SyntaxKind.EqualsEqualsToken))
            .WithModifiers(
                TokenList(
                    Token(
                        TriviaList(
                            Trivia(
                                DocumentationCommentTrivia(
                                    SyntaxKind.SingleLineDocumentationCommentTrivia,
                                    List(
                                        new XmlNodeSyntax[]
                                        {
                                            XmlText()
                                            .WithTextTokens(
                                                TokenList(
                                                    XmlTextLiteral(
                                                        TriviaList(
                                                            DocumentationCommentExterior("///")),
                                                        " ",
                                                        " ",
                                                        TriviaList()))),
                                            XmlExampleElement(
                                                SingletonList<XmlNodeSyntax>(
                                                    XmlText()
                                                    .WithTextTokens(
                                                        TokenList(
                                                            XmlTextNewLine(
                                                                TriviaList(),
                                                                Environment.NewLine,
                                                                Environment.NewLine,
                                                                TriviaList()),
                                                            XmlTextLiteral(
                                                                TriviaList(
                                                                    DocumentationCommentExterior("    ///")),
                                                                " Implements the equality operator.",
                                                                " Implements the equality operator.",
                                                                TriviaList()),
                                                            XmlTextNewLine(
                                                                TriviaList(),
                                                                Environment.NewLine,
                                                                Environment.NewLine,
                                                                TriviaList()),
                                                            XmlTextLiteral(
                                                                TriviaList(
                                                                    DocumentationCommentExterior("    ///")),
                                                                " ",
                                                                " ",
                                                                TriviaList())))))
                                            .WithStartTag(
                                                XmlElementStartTag(
                                                    XmlName(
                                                        Identifier("summary"))))
                                            .WithEndTag(
                                                XmlElementEndTag(
                                                    XmlName(
                                                        Identifier("summary")))),
                                            XmlText()
                                            .WithTextTokens(
                                                TokenList(
                                                    XmlTextNewLine(
                                                        TriviaList(),
                                                        Environment.NewLine,
                                                        Environment.NewLine,
                                                        TriviaList()),
                                                    XmlTextLiteral(
                                                        TriviaList(
                                                            DocumentationCommentExterior("    ///")),
                                                        " ",
                                                        " ",
                                                        TriviaList()))),
                                            XmlExampleElement(
                                                SingletonList<XmlNodeSyntax>(
                                                    XmlText()
                                                    .WithTextTokens(
                                                        TokenList(
                                                            XmlTextLiteral(
                                                                TriviaList(),
                                                                "The left operand.",
                                                                "The left operand.",
                                                                TriviaList())))))
                                            .WithStartTag(
                                                XmlElementStartTag(
                                                    XmlName(
                                                        Identifier(
                                                            TriviaList(),
                                                            SyntaxKind.ParamKeyword,
                                                            "param",
                                                            "param",
                                                            TriviaList())))
                                                .WithAttributes(
                                                    SingletonList<XmlAttributeSyntax>(
                                                        XmlNameAttribute(
                                                            XmlName(
                                                                Identifier("name")),
                                                            Token(SyntaxKind.DoubleQuoteToken),
                                                            IdentifierName(LeftVariableName),
                                                            Token(SyntaxKind.DoubleQuoteToken)))))
                                            .WithEndTag(
                                                XmlElementEndTag(
                                                    XmlName(
                                                        Identifier(
                                                            TriviaList(),
                                                            SyntaxKind.ParamKeyword,
                                                            "param",
                                                            "param",
                                                            TriviaList())))),
                                            XmlText()
                                            .WithTextTokens(
                                                TokenList(
                                                    XmlTextNewLine(
                                                        TriviaList(),
                                                        Environment.NewLine,
                                                        Environment.NewLine,
                                                        TriviaList()),
                                                    XmlTextLiteral(
                                                        TriviaList(
                                                            DocumentationCommentExterior("    ///")),
                                                        " ",
                                                        " ",
                                                        TriviaList()))),
                                            XmlExampleElement(
                                                SingletonList<XmlNodeSyntax>(
                                                    XmlText()
                                                    .WithTextTokens(
                                                        TokenList(
                                                            XmlTextLiteral(
                                                                TriviaList(),
                                                                "The right operand.",
                                                                "The right operand.",
                                                                TriviaList())))))
                                            .WithStartTag(
                                                XmlElementStartTag(
                                                    XmlName(
                                                        Identifier(
                                                            TriviaList(),
                                                            SyntaxKind.ParamKeyword,
                                                            "param",
                                                            "param",
                                                            TriviaList())))
                                                .WithAttributes(
                                                    SingletonList<XmlAttributeSyntax>(
                                                        XmlNameAttribute(
                                                            XmlName(
                                                                Identifier("name")),
                                                            Token(SyntaxKind.DoubleQuoteToken),
                                                            IdentifierName(RightVariableName),
                                                            Token(SyntaxKind.DoubleQuoteToken)))))
                                            .WithEndTag(
                                                XmlElementEndTag(
                                                    XmlName(
                                                        Identifier(
                                                            TriviaList(),
                                                            SyntaxKind.ParamKeyword,
                                                            "param",
                                                            "param",
                                                            TriviaList())))),
                                            XmlText()
                                            .WithTextTokens(
                                                TokenList(
                                                    XmlTextNewLine(
                                                        TriviaList(),
                                                        Environment.NewLine,
                                                        Environment.NewLine,
                                                        TriviaList()),
                                                    XmlTextLiteral(
                                                        TriviaList(
                                                            DocumentationCommentExterior("    ///")),
                                                        " ",
                                                        " ",
                                                        TriviaList()))),
                                            XmlExampleElement(
                                                SingletonList<XmlNodeSyntax>(
                                                    XmlText()
                                                    .WithTextTokens(
                                                        TokenList(
                                                            XmlTextLiteral(
                                                                TriviaList(),
                                                                "The result of the operator.",
                                                                "The result of the operator.",
                                                                TriviaList())))))
                                            .WithStartTag(
                                                XmlElementStartTag(
                                                    XmlName(
                                                        Identifier("returns"))))
                                            .WithEndTag(
                                                XmlElementEndTag(
                                                    XmlName(
                                                        Identifier("returns")))),
                                            XmlText()
                                            .WithTextTokens(
                                                TokenList(
                                                    XmlTextNewLine(
                                                        TriviaList(),
                                                        Environment.NewLine,
                                                        Environment.NewLine,
                                                        TriviaList()))),
                                        })))),
                        SyntaxKind.PublicKeyword,
                        TriviaList()),
                    Token(SyntaxKind.StaticKeyword)))
            .WithParameterList(
                ParameterList(
                    SeparatedList<ParameterSyntax>(
                        new SyntaxNodeOrToken[]
                        {
                            Parameter(
                                Identifier(LeftVariableName))
                            .WithType(
                                GenericName(
                                    Identifier(OneOf))
                                .WithTypeArgumentList(
                                    TypeArgumentList(
                                        SeparatedList<TypeSyntax>(
                                            Join(typeParameterNames.Select(IdentifierName)))))),
                            Token(SyntaxKind.CommaToken),
                            Parameter(
                                Identifier(RightVariableName))
                            .WithType(
                                GenericName(
                                    Identifier(OneOf))
                                .WithTypeArgumentList(
                                    TypeArgumentList(
                                        SeparatedList<TypeSyntax>(
                                            Join(typeParameterNames.Select(IdentifierName)))))),
                        })))
            .WithExpressionBody(
                ArrowExpressionClause(
                    InvocationExpression(
                        MemberAccessExpression(
                            SyntaxKind.SimpleMemberAccessExpression,
                            IdentifierName(LeftVariableName),
                            IdentifierName(nameof(object.Equals))))
                    .WithArgumentList(
                        ArgumentList(
                            SingletonSeparatedList(
                                Argument(
                                    IdentifierName(RightVariableName)))))))
            .WithSemicolonToken(
                Token(SyntaxKind.SemicolonToken));

            // the not-equals
            yield return OperatorDeclaration(
                PredefinedType(
                    Token(SyntaxKind.BoolKeyword)),
                Token(SyntaxKind.ExclamationEqualsToken))
            .WithModifiers(
                TokenList(
                    Token(
                        TriviaList(
                            Trivia(
                                DocumentationCommentTrivia(
                                    SyntaxKind.SingleLineDocumentationCommentTrivia,
                                    List(
                                        new XmlNodeSyntax[]
                                        {
                                            XmlText()
                                            .WithTextTokens(
                                                TokenList(
                                                    XmlTextLiteral(
                                                        TriviaList(
                                                            DocumentationCommentExterior("///")),
                                                        " ",
                                                        " ",
                                                        TriviaList()))),
                                            XmlExampleElement(
                                                SingletonList<XmlNodeSyntax>(
                                                    XmlText()
                                                    .WithTextTokens(
                                                        TokenList(
                                                            XmlTextNewLine(
                                                                TriviaList(),
                                                                Environment.NewLine,
                                                                Environment.NewLine,
                                                                TriviaList()),
                                                            XmlTextLiteral(
                                                                TriviaList(
                                                                    DocumentationCommentExterior("    ///")),
                                                                " Implements the inequality operator.",
                                                                " Implements the inequality operator.",
                                                                TriviaList()),
                                                            XmlTextNewLine(
                                                                TriviaList(),
                                                                Environment.NewLine,
                                                                Environment.NewLine,
                                                                TriviaList()),
                                                            XmlTextLiteral(
                                                                TriviaList(
                                                                    DocumentationCommentExterior("    ///")),
                                                                " ",
                                                                " ",
                                                                TriviaList())))))
                                            .WithStartTag(
                                                XmlElementStartTag(
                                                    XmlName(
                                                        Identifier("summary"))))
                                            .WithEndTag(
                                                XmlElementEndTag(
                                                    XmlName(
                                                        Identifier("summary")))),
                                            XmlText()
                                            .WithTextTokens(
                                                TokenList(
                                                    XmlTextNewLine(
                                                        TriviaList(),
                                                        Environment.NewLine,
                                                        Environment.NewLine,
                                                        TriviaList()),
                                                    XmlTextLiteral(
                                                        TriviaList(
                                                            DocumentationCommentExterior("    ///")),
                                                        " ",
                                                        " ",
                                                        TriviaList()))),
                                            XmlExampleElement(
                                                SingletonList<XmlNodeSyntax>(
                                                    XmlText()
                                                    .WithTextTokens(
                                                        TokenList(
                                                            XmlTextLiteral(
                                                                TriviaList(),
                                                                "The left operand.",
                                                                "The left operand.",
                                                                TriviaList())))))
                                            .WithStartTag(
                                                XmlElementStartTag(
                                                    XmlName(
                                                        Identifier(
                                                            TriviaList(),
                                                            SyntaxKind.ParamKeyword,
                                                            "param",
                                                            "param",
                                                            TriviaList())))
                                                .WithAttributes(
                                                    SingletonList<XmlAttributeSyntax>(
                                                        XmlNameAttribute(
                                                            XmlName(
                                                                Identifier("name")),
                                                            Token(SyntaxKind.DoubleQuoteToken),
                                                            IdentifierName(LeftVariableName),
                                                            Token(SyntaxKind.DoubleQuoteToken)))))
                                            .WithEndTag(
                                                XmlElementEndTag(
                                                    XmlName(
                                                        Identifier(
                                                            TriviaList(),
                                                            SyntaxKind.ParamKeyword,
                                                            "param",
                                                            "param",
                                                            TriviaList())))),
                                            XmlText()
                                            .WithTextTokens(
                                                TokenList(
                                                    XmlTextNewLine(
                                                        TriviaList(),
                                                        Environment.NewLine,
                                                        Environment.NewLine,
                                                        TriviaList()),
                                                    XmlTextLiteral(
                                                        TriviaList(
                                                            DocumentationCommentExterior("    ///")),
                                                        " ",
                                                        " ",
                                                        TriviaList()))),
                                            XmlExampleElement(
                                                SingletonList<XmlNodeSyntax>(
                                                    XmlText()
                                                    .WithTextTokens(
                                                        TokenList(
                                                            XmlTextLiteral(
                                                                TriviaList(),
                                                                "The right operand.",
                                                                "The right operand.",
                                                                TriviaList())))))
                                            .WithStartTag(
                                                XmlElementStartTag(
                                                    XmlName(
                                                        Identifier(
                                                            TriviaList(),
                                                            SyntaxKind.ParamKeyword,
                                                            "param",
                                                            "param",
                                                            TriviaList())))
                                                .WithAttributes(
                                                    SingletonList<XmlAttributeSyntax>(
                                                        XmlNameAttribute(
                                                            XmlName(
                                                                Identifier("name")),
                                                            Token(SyntaxKind.DoubleQuoteToken),
                                                            IdentifierName(RightVariableName),
                                                            Token(SyntaxKind.DoubleQuoteToken)))))
                                            .WithEndTag(
                                                XmlElementEndTag(
                                                    XmlName(
                                                        Identifier(
                                                            TriviaList(),
                                                            SyntaxKind.ParamKeyword,
                                                            "param",
                                                            "param",
                                                            TriviaList())))),
                                            XmlText()
                                            .WithTextTokens(
                                                TokenList(
                                                    XmlTextNewLine(
                                                        TriviaList(),
                                                        Environment.NewLine,
                                                        Environment.NewLine,
                                                        TriviaList()),
                                                    XmlTextLiteral(
                                                        TriviaList(
                                                            DocumentationCommentExterior("    ///")),
                                                        " ",
                                                        " ",
                                                        TriviaList()))),
                                            XmlExampleElement(
                                                SingletonList<XmlNodeSyntax>(
                                                    XmlText()
                                                    .WithTextTokens(
                                                        TokenList(
                                                            XmlTextLiteral(
                                                                TriviaList(),
                                                                "The result of the operator.",
                                                                "The result of the operator.",
                                                                TriviaList())))))
                                            .WithStartTag(
                                                XmlElementStartTag(
                                                    XmlName(
                                                        Identifier("returns"))))
                                            .WithEndTag(
                                                XmlElementEndTag(
                                                    XmlName(
                                                        Identifier("returns")))),
                                            XmlText()
                                            .WithTextTokens(
                                                TokenList(
                                                    XmlTextNewLine(
                                                        TriviaList(),
                                                        Environment.NewLine,
                                                        Environment.NewLine,
                                                        TriviaList()))),
                                        })))),
                        SyntaxKind.PublicKeyword,
                        TriviaList()),
                    Token(SyntaxKind.StaticKeyword)))
            .WithParameterList(
                ParameterList(
                    SeparatedList<ParameterSyntax>(
                        new SyntaxNodeOrToken[]
                        {
                            Parameter(
                                Identifier(LeftVariableName))
                            .WithType(
                                GenericName(
                                    Identifier(OneOf))
                                .WithTypeArgumentList(
                                    TypeArgumentList(
                                        SeparatedList<TypeSyntax>(
                                            Join(typeParameterNames.Select(IdentifierName)))))),
                            Token(SyntaxKind.CommaToken),
                            Parameter(
                                Identifier(RightVariableName))
                            .WithType(
                                GenericName(
                                    Identifier(OneOf))
                                .WithTypeArgumentList(
                                    TypeArgumentList(
                                        SeparatedList<TypeSyntax>(
                                            Join(typeParameterNames.Select(IdentifierName)))))),
                        })))
            .WithExpressionBody(
                ArrowExpressionClause(
                    PrefixUnaryExpression(
                        SyntaxKind.LogicalNotExpression,
                        InvocationExpression(
                            MemberAccessExpression(
                                SyntaxKind.SimpleMemberAccessExpression,
                                IdentifierName(LeftVariableName),
                                IdentifierName(nameof(Equals))))
                        .WithArgumentList(
                            ArgumentList(
                                SingletonSeparatedList(
                                    Argument(
                                        IdentifierName(RightVariableName))))))))
            .WithSemicolonToken(
                Token(SyntaxKind.SemicolonToken));
        }

        static MethodDeclarationSyntax GetSwitchMethodDeclaration(IList<string> typeParameterNames)
        {
            return MethodDeclaration(
                    PredefinedType(
                        Token(SyntaxKind.VoidKeyword)),
                    Identifier("Switch"))
                .WithModifiers(
                    TokenList(
                        Token(
                            TriviaList(
                                Trivia(
                                    DocumentationCommentTrivia(
                                        SyntaxKind.SingleLineDocumentationCommentTrivia,
                                        List(GetDocumentation(typeParameterNames))))),
                            SyntaxKind.PublicKeyword,
                            TriviaList())))
                .WithParameterList(
                    ParameterList(
                        SeparatedList<ParameterSyntax>(Join(GetParameters(typeParameterNames)))))
                .WithBody(
                    Block(GetBody(typeParameterNames)));

            static IEnumerable<XmlNodeSyntax> GetDocumentation(IList<string> typeParameterNames)
            {
                yield return XmlText()
                .WithTextTokens(
                    TokenList(
                        XmlTextLiteral(
                            TriviaList(
                                DocumentationCommentExterior("///")),
                            " ",
                            " ",
                            TriviaList())));
                yield return XmlExampleElement(
                    SingletonList<XmlNodeSyntax>(
                        XmlText()
                        .WithTextTokens(
                            TokenList(
                                XmlTextNewLine(
                                    TriviaList(),
                                    Environment.NewLine,
                                    Environment.NewLine,
                                    TriviaList()),
                                XmlTextLiteral(
                                    TriviaList(
                                        DocumentationCommentExterior("    ///")),
                                    " Performs an action on this instance.",
                                    " Performs an action on this instance.",
                                    TriviaList()),
                                XmlTextNewLine(
                                    TriviaList(),
                                    Environment.NewLine,
                                    Environment.NewLine,
                                    TriviaList()),
                                XmlTextLiteral(
                                    TriviaList(
                                        DocumentationCommentExterior("    ///")),
                                    " ",
                                    " ",
                                    TriviaList())))))
                .WithStartTag(
                    XmlElementStartTag(
                        XmlName(
                            Identifier("summary"))))
                .WithEndTag(
                    XmlElementEndTag(
                        XmlName(
                            Identifier("summary"))));
                yield return XmlText()
                .WithTextTokens(
                    TokenList(
                        XmlTextNewLine(
                            TriviaList(),
                            Environment.NewLine,
                            Environment.NewLine,
                            TriviaList())));
                for (int i = 0; i < typeParameterNames.Count; i++)
                {
                    yield return XmlText()
                    .WithTextTokens(
                        TokenList(
                            XmlTextLiteral(
                                TriviaList(
                                    DocumentationCommentExterior("///")),
                                " ",
                                " ",
                                TriviaList())));
                    yield return XmlExampleElement(
                        XmlText()
                        .WithTextTokens(
                            TokenList(
                                XmlTextLiteral(
                                    TriviaList(),
                                    "The ",
                                    "The ",
                                    TriviaList()))),
                        XmlNullKeywordElement()
                        .WithAttributes(
                            SingletonList<XmlAttributeSyntax>(
                                XmlCrefAttribute(
                                    NameMemberCref(
                                        GenericName(
                                            Identifier(nameof(Action)))
                                        .WithTypeArgumentList(
                                            TypeArgumentList(
                                                SingletonSeparatedList<TypeSyntax>(
                                                    IdentifierName("T")))))))),
                        XmlText()
                        .WithTextTokens(
                            TokenList(
                                XmlTextLiteral(
                                    TriviaList(),
                                    " action for ",
                                    " action for ",
                                    TriviaList()))),
                        XmlNullKeywordElement()
                        .WithName(
                            XmlName(
                                Identifier("typeparamref")))
                        .WithAttributes(
                            SingletonList<XmlAttributeSyntax>(
                                XmlNameAttribute(
                                    XmlName(
                                        Identifier("name")),
                                    Token(SyntaxKind.DoubleQuoteToken),
                                    IdentifierName(typeParameterNames[i]),
                                    Token(SyntaxKind.DoubleQuoteToken)))),
                        XmlText()
                        .WithTextTokens(
                            TokenList(
                                XmlTextLiteral(
                                    TriviaList(),
                                    ".",
                                    ".",
                                    TriviaList()))))
                    .WithStartTag(
                        XmlElementStartTag(
                            XmlName(
                                Identifier(
                                    TriviaList(),
                                    SyntaxKind.ParamKeyword,
                                    "param",
                                    "param",
                                    TriviaList())))
                        .WithAttributes(
                            SingletonList<XmlAttributeSyntax>(
                                XmlNameAttribute(
                                    XmlName(
                                        Identifier("name")),
                                    Token(SyntaxKind.DoubleQuoteToken),
                                    IdentifierName(GetFunctionName(i)),
                                    Token(SyntaxKind.DoubleQuoteToken)))))
                    .WithEndTag(
                        XmlElementEndTag(
                            XmlName(
                                Identifier(
                                    TriviaList(),
                                    SyntaxKind.ParamKeyword,
                                    "param",
                                    "param",
                                    TriviaList()))));
                    yield return XmlText()
                    .WithTextTokens(
                        TokenList(
                            XmlTextNewLine(
                                TriviaList(),
                                Environment.NewLine,
                                Environment.NewLine,
                                TriviaList())));
                }
            }

            static IEnumerable<ParameterSyntax> GetParameters(IList<string> typeParameterNames)
            {
                for (int i = 0; i < typeParameterNames.Count; i++)
                {
                    yield return Parameter(
                        Identifier(GetFunctionName(i)))
                        .WithType(
                        GenericName(
                            Identifier(nameof(Action)))
                        .WithTypeArgumentList(
                            TypeArgumentList(
                                SingletonSeparatedList<TypeSyntax>(
                                    NullableType(
                                        IdentifierName(typeParameterNames[i]))))));
                }
            }

            static IEnumerable<StatementSyntax> GetBody(IList<string> typeParameterNames)
            {
                for (int i = 0; i < typeParameterNames.Count; i++)
                {
                    var functionName = IdentifierName(GetFunctionName(i));
                    yield return IfStatement(
                        BinaryExpression(
                            SyntaxKind.LogicalAndExpression,
                            MemberAccessExpression(
                                SyntaxKind.SimpleMemberAccessExpression,
                                ThisExpression(),
                                IdentifierName($"Is{typeParameterNames[i]}")),
                            IsPatternExpression(
                                functionName,
                                UnaryPattern(
                                    ConstantPattern(
                                        LiteralExpression(
                                            SyntaxKind.NullLiteralExpression))))),
                        Block(
                            ExpressionStatement(
                                InvocationExpression(
                                    functionName)
                                .WithArgumentList(
                                    ArgumentList(
                                        SingletonSeparatedList(
                                            Argument(
                                                MemberAccessExpression(
                                                    SyntaxKind.SimpleMemberAccessExpression,
                                                    ThisExpression(),
                                                    IdentifierName(GetValueName(i)))))))),
                            ReturnStatement()));
                }

                yield return ThrowStatement(
                    ObjectCreationExpression(
                        IdentifierName(nameof(InvalidOperationException)))
                    .WithArgumentList(
                        ArgumentList()));
            }
        }

        static MethodDeclarationSyntax GetMatchMethodDeclaration(IList<string> typeParameterNames)
        {
            return MethodDeclaration(
                    IdentifierName(ResultsTypeParameter),
                    Identifier("Match"))
                .WithModifiers(
                    TokenList(
                        Token(
                            TriviaList(
                                Trivia(
                                    DocumentationCommentTrivia(
                                        SyntaxKind.SingleLineDocumentationCommentTrivia,
                                        List(GetDocumentation(typeParameterNames))))),
                            SyntaxKind.PublicKeyword,
                            TriviaList())))
                .WithTypeParameterList(
                    TypeParameterList(
                        SingletonSeparatedList(
                            TypeParameter(
                                Identifier(ResultsTypeParameter)))))
                .WithParameterList(
                    ParameterList(
                        SeparatedList<ParameterSyntax>(
                            Join(GetParameters(typeParameterNames)))))
                .WithExpressionBody(
                    ArrowExpressionClause(GetSwitchExpression(typeParameterNames)))
                .WithSemicolonToken(
                    Token(SyntaxKind.SemicolonToken));

            static IEnumerable<XmlNodeSyntax> GetDocumentation(IList<string> typeParameterNames)
            {
                yield return XmlText()
                .WithTextTokens(
                    TokenList(
                        XmlTextLiteral(
                            TriviaList(
                                DocumentationCommentExterior("///")),
                            " ",
                            " ",
                            TriviaList())));
                yield return XmlExampleElement(
                    SingletonList<XmlNodeSyntax>(
                        XmlText()
                        .WithTextTokens(
                            TokenList(
                                XmlTextNewLine(
                                    TriviaList(),
                                    Environment.NewLine,
                                    Environment.NewLine,
                                    TriviaList()),
                                XmlTextLiteral(
                                    TriviaList(
                                        DocumentationCommentExterior("    ///")),
                                    " Matches this instance.",
                                    " Matches this instance.",
                                    TriviaList()),
                                XmlTextNewLine(
                                    TriviaList(),
                                    Environment.NewLine,
                                    Environment.NewLine,
                                    TriviaList()),
                                XmlTextLiteral(
                                    TriviaList(
                                        DocumentationCommentExterior("    ///")),
                                    " ",
                                    " ",
                                    TriviaList())))))
                .WithStartTag(
                    XmlElementStartTag(
                        XmlName(
                            Identifier("summary"))))
                .WithEndTag(
                    XmlElementEndTag(
                        XmlName(
                            Identifier("summary"))));
                yield return XmlText()
                .WithTextTokens(
                    TokenList(
                        XmlTextNewLine(
                            TriviaList(),
                            Environment.NewLine,
                            Environment.NewLine,
                            TriviaList()),
                        XmlTextLiteral(
                            TriviaList(
                                DocumentationCommentExterior("    ///")),
                            " ",
                            " ",
                            TriviaList())));
                yield return XmlExampleElement(
                    SingletonList<XmlNodeSyntax>(
                        XmlText()
                        .WithTextTokens(
                            TokenList(
                                XmlTextLiteral(
                                    TriviaList(),
                                    "The result type.",
                                    "The result type.",
                                    TriviaList())))))
                .WithStartTag(
                    XmlElementStartTag(
                        XmlName(
                            Identifier("typeparam")))
                    .WithAttributes(
                        SingletonList<XmlAttributeSyntax>(
                            XmlNameAttribute(
                                XmlName(
                                    Identifier("name")),
                                Token(SyntaxKind.DoubleQuoteToken),
                                IdentifierName(ResultsTypeParameter),
                                Token(SyntaxKind.DoubleQuoteToken)))))
                .WithEndTag(
                    XmlElementEndTag(
                        XmlName(
                            Identifier("typeparam"))));
                yield return XmlText()
                .WithTextTokens(
                    TokenList(
                        XmlTextNewLine(
                            TriviaList(),
                            Environment.NewLine,
                            Environment.NewLine,
                            TriviaList())));
                for (int i = 0; i < typeParameterNames.Count; i++)
                {
                    yield return XmlText()
                    .WithTextTokens(
                        TokenList(
                            XmlTextLiteral(
                                TriviaList(
                                    DocumentationCommentExterior("///")),
                                " ",
                                " ",
                                TriviaList())));
                    yield return XmlExampleElement(
                        XmlText()
                        .WithTextTokens(
                            TokenList(
                                XmlTextLiteral(
                                    TriviaList(),
                                    "The ",
                                    "The ",
                                    TriviaList()))),
                        XmlNullKeywordElement()
                        .WithAttributes(
                            SingletonList<XmlAttributeSyntax>(
                                XmlCrefAttribute(
                                    NameMemberCref(
                                        GenericName(
                                            Identifier(nameof(Func<object>)))
                                        .WithTypeArgumentList(
                                            TypeArgumentList(
                                                SeparatedList<TypeSyntax>(
                                                    new SyntaxNodeOrToken[]
                                                    {
                                                        IdentifierName("T"),
                                                        Token(SyntaxKind.CommaToken),
                                                        IdentifierName(ResultsTypeParameter),
                                                    }))))))),
                        XmlText()
                        .WithTextTokens(
                            TokenList(
                                XmlTextLiteral(
                                    TriviaList(),
                                    " for ",
                                    " for ",
                                    TriviaList()))),
                        XmlNullKeywordElement()
                        .WithName(
                            XmlName(
                                Identifier("typeparamref")))
                        .WithAttributes(
                            SingletonList<XmlAttributeSyntax>(
                                XmlNameAttribute(
                                    XmlName(
                                        Identifier("name")),
                                    Token(SyntaxKind.DoubleQuoteToken),
                                    IdentifierName(typeParameterNames[i]),
                                    Token(SyntaxKind.DoubleQuoteToken)))),
                        XmlText()
                        .WithTextTokens(
                            TokenList(
                                XmlTextLiteral(
                                    TriviaList(),
                                    ".",
                                    ".",
                                    TriviaList()))))
                    .WithStartTag(
                        XmlElementStartTag(
                            XmlName(
                                Identifier(
                                    TriviaList(),
                                    SyntaxKind.ParamKeyword,
                                    "param",
                                    "param",
                                    TriviaList())))
                        .WithAttributes(
                            SingletonList<XmlAttributeSyntax>(
                                XmlNameAttribute(
                                    XmlName(
                                        Identifier("name")),
                                    Token(SyntaxKind.DoubleQuoteToken),
                                    IdentifierName(GetFunctionName(i)),
                                    Token(SyntaxKind.DoubleQuoteToken)))))
                    .WithEndTag(
                        XmlElementEndTag(
                            XmlName(
                                Identifier(
                                    TriviaList(),
                                    SyntaxKind.ParamKeyword,
                                    "param",
                                    "param",
                                    TriviaList()))));
                    yield return XmlText()
                    .WithTextTokens(
                        TokenList(
                            XmlTextNewLine(
                                TriviaList(),
                                Environment.NewLine,
                                Environment.NewLine,
                                TriviaList())));
                }

                yield return XmlText()
                    .WithTextTokens(
                        TokenList(
                            XmlTextLiteral(
                                TriviaList(
                                    DocumentationCommentExterior("///")),
                                " ",
                                " ",
                                TriviaList())));
                yield return XmlExampleElement(
                    SingletonList<XmlNodeSyntax>(
                        XmlText()
                        .WithTextTokens(
                            TokenList(
                                XmlTextLiteral(
                                    TriviaList(),
                                    "The matched result.",
                                    "The matched result.",
                                    TriviaList())))))
                .WithStartTag(
                    XmlElementStartTag(
                        XmlName(
                            Identifier("returns"))))
                .WithEndTag(
                    XmlElementEndTag(
                        XmlName(
                            Identifier("returns"))));
                yield return XmlText()
                .WithTextTokens(
                    TokenList(
                        XmlTextNewLine(
                            TriviaList(),
                            Environment.NewLine,
                            Environment.NewLine,
                            TriviaList())));
            }

            static IEnumerable<ParameterSyntax> GetParameters(IList<string> typeParameterNames)
            {
                for (int i = 0; i < typeParameterNames.Count; i++)
                {
                    yield return Parameter(
                        Identifier(GetFunctionName(i)))
                    .WithType(
                        GenericName(
                            Identifier(nameof(Func<object>)))
                        .WithTypeArgumentList(
                            TypeArgumentList(
                                SeparatedList<TypeSyntax>(
                                    new SyntaxNodeOrToken[]
                                    {
                                        NullableType(
                                            IdentifierName(typeParameterNames[i])),
                                        Token(SyntaxKind.CommaToken),
                                        IdentifierName(SourceGenerator.ResultsTypeParameter),
                                    }))));
                }
            }

            static SwitchExpressionSyntax GetSwitchExpression(IList<string> typeParameterNames)
            {
                return SwitchExpression(
                    TupleExpression(
                        SeparatedList<ArgumentSyntax>(
                            Join(GetArguments(typeParameterNames)))))
                .WithArms(
                    SeparatedList<SwitchExpressionArmSyntax>(GetSwitchExpressionArms(typeParameterNames)));

                static IEnumerable<ArgumentSyntax> GetArguments(IList<string> typeParameterNames)
                {
                    yield return Argument(
                        MemberAccessExpression(
                            SyntaxKind.SimpleMemberAccessExpression,
                            ThisExpression(),
                            IdentifierName(IndexPropertyName)));
                    for (int i = 0; i < typeParameterNames.Count; i++)
                    {
                        yield return Argument(
                            IdentifierName(GetFunctionName(i)));
                    }
                }

                static IEnumerable<SyntaxNodeOrToken> GetSwitchExpressionArms(IList<string> typeParameterNames)
                {
                    for (int i = 0; i < typeParameterNames.Count; i++)
                    {
                        yield return SwitchExpressionArm(
                            RecursivePattern()
                            .WithPositionalPatternClause(
                                PositionalPatternClause(
                                    SeparatedList<SubpatternSyntax>(Join(GetSubpatterns(i, typeParameterNames.Count))))),
                            InvocationExpression(
                                IdentifierName(GetFunctionName(i)))
                            .WithArgumentList(
                                ArgumentList(
                                    SingletonSeparatedList(
                                        Argument(
                                            MemberAccessExpression(
                                                SyntaxKind.SimpleMemberAccessExpression,
                                                ThisExpression(),
                                                IdentifierName(GetValueName(i))))))));

                        yield return Token(SyntaxKind.CommaToken);

                        static IEnumerable<SubpatternSyntax> GetSubpatterns(int index, int count)
                        {
                            yield return Subpattern(
                                ConstantPattern(
                                    LiteralExpression(
                                        SyntaxKind.NumericLiteralExpression,
                                        Literal(index))));

                            for (int i = 0; i < count; i++)
                            {
                                if (i == index)
                                {
                                    yield return Subpattern(
                                        UnaryPattern(
                                            ConstantPattern(
                                                LiteralExpression(
                                                    SyntaxKind.NullLiteralExpression))));
                                }
                                else
                                {
                                    yield return Subpattern(DiscardPattern());
                                }
                            }
                        }
                    }

                    yield return SwitchExpressionArm(
                        DiscardPattern(),
                        ThrowExpression(
                            ObjectCreationExpression(
                                IdentifierName(nameof(InvalidOperationException)))
                            .WithArgumentList(
                                ArgumentList())));
                    yield return Token(SyntaxKind.CommaToken);
                }
            }
        }

        static IEnumerable<MethodDeclarationSyntax> GetMapMethodDeclarations(IList<string> typeParameterNames)
        {
            const string MapFunctionName = "mapFunc";

            for (int i = 0; i < typeParameterNames.Count; i++)
            {
                var types = GetTypeArguments(i, typeParameterNames);

                yield return MethodDeclaration(
                    GenericName(
                        Identifier(OneOf))
                    .WithTypeArgumentList(
                        TypeArgumentList(
                            SeparatedList<TypeSyntax>(Join(types)))),
                    Identifier($"Map{typeParameterNames[i]}"))
                .WithModifiers(
                    TokenList(
                        Token(
                            TriviaList(
                                Trivia(
                                    DocumentationCommentTrivia(
                                        SyntaxKind.SingleLineDocumentationCommentTrivia,
                                        List(
                                            GetDocumentation(typeParameterNames[i], types))))),
                            SyntaxKind.PublicKeyword,
                            TriviaList())))
                .WithTypeParameterList(
                    TypeParameterList(
                        SingletonSeparatedList(
                            TypeParameter(
                                Identifier(ResultsTypeParameter)))))
                .WithParameterList(
                    ParameterList(
                        SingletonSeparatedList(
                            Parameter(
                                Identifier(MapFunctionName))
                            .WithType(
                                GenericName(
                                    Identifier(nameof(Func<object>)))
                                .WithTypeArgumentList(
                                    TypeArgumentList(
                                        SeparatedList<TypeSyntax>(
                                            new SyntaxNodeOrToken[]
                                            {
                                                NullableType(
                                                    IdentifierName(typeParameterNames[i])),
                                                Token(SyntaxKind.CommaToken),
                                                IdentifierName(ResultsTypeParameter),
                                            })))))))
                .WithBody(
                    Block(
                        GetStatements(i, typeParameterNames)));

                static IEnumerable<TypeSyntax> GetTypeArguments(int index, IList<string> typeParameterNames)
                {
                    for (int i = 0; i < typeParameterNames.Count; i++)
                    {
                        if (i == index)
                        {
                            yield return IdentifierName(ResultsTypeParameter);
                        }
                        else
                        {
                            yield return IdentifierName(typeParameterNames[i]);
                        }
                    }
                }

                static IEnumerable<XmlNodeSyntax> GetDocumentation(string typeParameterName, IEnumerable<TypeSyntax> typeParameters)
                {
                    yield return XmlText()
                    .WithTextTokens(
                        TokenList(
                            XmlTextLiteral(
                                TriviaList(
                                    DocumentationCommentExterior("///")),
                                " ",
                                " ",
                                TriviaList())));
                    yield return XmlExampleElement(
                        XmlText()
                        .WithTextTokens(
                            TokenList(
                                XmlTextNewLine(
                                    TriviaList(),
                                    Environment.NewLine,
                                    Environment.NewLine,
                                    TriviaList()),
                                XmlTextLiteral(
                                    TriviaList(
                                        DocumentationCommentExterior("    ///")),
                                    " Maps the ",
                                    " Maps the ",
                                    TriviaList()))),
                        XmlNullKeywordElement()
                        .WithName(
                            XmlName(
                                Identifier("typeparamref")))
                        .WithAttributes(
                            SingletonList<XmlAttributeSyntax>(
                                XmlNameAttribute(
                                    XmlName(
                                        Identifier("name")),
                                    Token(SyntaxKind.DoubleQuoteToken),
                                    IdentifierName(typeParameterName),
                                    Token(SyntaxKind.DoubleQuoteToken)))),
                        XmlText()
                        .WithTextTokens(
                            TokenList(
                                XmlTextLiteral(
                                    TriviaList(),
                                    " instance through the function.",
                                    " instance through the function.",
                                    TriviaList()),
                                XmlTextNewLine(
                                    TriviaList(),
                                    Environment.NewLine,
                                    Environment.NewLine,
                                    TriviaList()),
                                XmlTextLiteral(
                                    TriviaList(
                                        DocumentationCommentExterior("    ///")),
                                    " ",
                                    " ",
                                    TriviaList()))))
                    .WithStartTag(
                        XmlElementStartTag(
                            XmlName(
                                Identifier("summary"))))
                    .WithEndTag(
                        XmlElementEndTag(
                            XmlName(
                                Identifier("summary"))));
                    yield return XmlText()
                    .WithTextTokens(
                        TokenList(
                            XmlTextNewLine(
                                TriviaList(),
                                Environment.NewLine,
                                Environment.NewLine,
                                TriviaList())));
                    yield return XmlText()
                    .WithTextTokens(
                        TokenList(
                            XmlTextLiteral(
                                TriviaList(
                                    DocumentationCommentExterior("    ///")),
                                " ",
                                " ",
                                TriviaList())));
                    yield return XmlExampleElement(
                        SingletonList<XmlNodeSyntax>(
                            XmlText()
                            .WithTextTokens(
                                TokenList(
                                    XmlTextLiteral(
                                        TriviaList(),
                                        "The type of result.",
                                        "The type of result.",
                                        TriviaList())))))
                    .WithStartTag(
                        XmlElementStartTag(
                            XmlName(
                                Identifier("typeparam")))
                        .WithAttributes(
                            SingletonList<XmlAttributeSyntax>(
                                XmlNameAttribute(
                                    XmlName(
                                        Identifier("name")),
                                    Token(SyntaxKind.DoubleQuoteToken),
                                    IdentifierName(ResultsTypeParameter),
                                    Token(SyntaxKind.DoubleQuoteToken)))))
                    .WithEndTag(
                        XmlElementEndTag(
                            XmlName(
                                Identifier("typeparam"))));
                    yield return XmlText()
                    .WithTextTokens(
                        TokenList(
                            XmlTextNewLine(
                                TriviaList(),
                                Environment.NewLine,
                                Environment.NewLine,
                                TriviaList()),
                            XmlTextLiteral(
                                TriviaList(
                                    DocumentationCommentExterior("    ///")),
                                " ",
                                " ",
                                TriviaList())));
                    yield return XmlExampleElement(
                        SingletonList<XmlNodeSyntax>(
                            XmlText()
                            .WithTextTokens(
                                TokenList(
                                    XmlTextLiteral(
                                        TriviaList(),
                                        "The map function.",
                                        "The map function.",
                                        TriviaList())))))
                    .WithStartTag(
                        XmlElementStartTag(
                            XmlName(
                                Identifier(
                                    TriviaList(),
                                    SyntaxKind.ParamKeyword,
                                    "param",
                                    "param",
                                    TriviaList())))
                        .WithAttributes(
                            SingletonList<XmlAttributeSyntax>(
                                XmlNameAttribute(
                                    XmlName(
                                        Identifier("name")),
                                    Token(SyntaxKind.DoubleQuoteToken),
                                    IdentifierName(MapFunctionName),
                                    Token(SyntaxKind.DoubleQuoteToken)))))
                    .WithEndTag(
                        XmlElementEndTag(
                            XmlName(
                                Identifier(
                                    TriviaList(),
                                    SyntaxKind.ParamKeyword,
                                    "param",
                                    "param",
                                    TriviaList()))));
                    yield return XmlText()
                    .WithTextTokens(
                        TokenList(
                            XmlTextNewLine(
                                TriviaList(),
                                Environment.NewLine,
                                Environment.NewLine,
                                TriviaList())));
                    yield return XmlText()
                    .WithTextTokens(
                        TokenList(
                            XmlTextLiteral(
                                TriviaList(
                                    DocumentationCommentExterior("///")),
                                " ",
                                " ",
                                TriviaList())));
                    yield return XmlExampleElement(
                        XmlText()
                        .WithTextTokens(
                            TokenList(
                                XmlTextLiteral(
                                    TriviaList(),
                                    "A new instance of ",
                                    "A new instance of ",
                                    TriviaList()))),
                        XmlNullKeywordElement()
                        .WithAttributes(
                            SingletonList<XmlAttributeSyntax>(
                                XmlCrefAttribute(
                                    NameMemberCref(
                                        GenericName(
                                            Identifier(OneOf))
                                        .WithTypeArgumentList(
                                            TypeArgumentList(
                                                SeparatedList<TypeSyntax>(Join(typeParameters)))))))),
                        XmlText()
                        .WithTextTokens(
                            TokenList(
                                XmlTextLiteral(
                                    TriviaList(),
                                    ".",
                                    ".",
                                    TriviaList()))))
                    .WithStartTag(
                        XmlElementStartTag(
                            XmlName(
                                Identifier("returns"))))
                    .WithEndTag(
                        XmlElementEndTag(
                            XmlName(
                                Identifier("returns"))));
                    yield return XmlText()
                    .WithTextTokens(
                        TokenList(
                            XmlTextNewLine(
                                TriviaList(),
                                Environment.NewLine,
                                Environment.NewLine,
                                TriviaList()),
                            XmlTextLiteral(
                                TriviaList(
                                    DocumentationCommentExterior("    ///")),
                                " ",
                                " ",
                                TriviaList())));
                    yield return XmlExampleElement(
                        XmlNullKeywordElement()
                        .WithName(
                            XmlName(
                                Identifier("paramref")))
                        .WithAttributes(
                            SingletonList<XmlAttributeSyntax>(
                                XmlNameAttribute(
                                    XmlName(
                                        Identifier("name")),
                                    Token(SyntaxKind.DoubleQuoteToken),
                                    IdentifierName(MapFunctionName),
                                    Token(SyntaxKind.DoubleQuoteToken)))),
                        XmlText()
                        .WithTextTokens(
                            TokenList(
                                XmlTextLiteral(
                                    TriviaList(),
                                    " is ",
                                    " is ",
                                    TriviaList()))),
                        XmlNullKeywordElement(),
                        XmlText()
                        .WithTextTokens(
                            TokenList(
                                XmlTextLiteral(
                                    TriviaList(),
                                    ".",
                                    ".",
                                    TriviaList()))))
                    .WithStartTag(
                        XmlElementStartTag(
                            XmlName(
                                Identifier("exception")))
                        .WithAttributes(
                            SingletonList<XmlAttributeSyntax>(
                                XmlCrefAttribute(
                                    NameMemberCref(
                                        IdentifierName(nameof(ArgumentNullException)))))))
                    .WithEndTag(
                        XmlElementEndTag(
                            XmlName(
                                Identifier("exception"))));
                    yield return XmlText()
                    .WithTextTokens(
                        TokenList(
                            XmlTextNewLine(
                                TriviaList(),
                                Environment.NewLine,
                                Environment.NewLine,
                                TriviaList()),
                            XmlTextLiteral(
                                TriviaList(
                                    DocumentationCommentExterior("    ///")),
                                " ",
                                " ",
                                TriviaList())));
                    yield return XmlExampleElement(
                        XmlText()
                        .WithTextTokens(
                            TokenList(
                                XmlTextLiteral(
                                    TriviaList(),
                                    "This instance does not represent a ",
                                    "This instance does not represent a ",
                                    TriviaList()))),
                        XmlNullKeywordElement()
                        .WithName(
                            XmlName(
                                Identifier("typeparamref")))
                        .WithAttributes(
                            SingletonList<XmlAttributeSyntax>(
                                XmlNameAttribute(
                                    XmlName(
                                        Identifier("name")),
                                    Token(SyntaxKind.DoubleQuoteToken),
                                    IdentifierName(typeParameterName),
                                    Token(SyntaxKind.DoubleQuoteToken)))),
                        XmlText()
                        .WithTextTokens(
                            TokenList(
                                XmlTextLiteral(
                                    TriviaList(),
                                    " instance.",
                                    " instance.",
                                    TriviaList()))))
                    .WithStartTag(
                        XmlElementStartTag(
                            XmlName(
                                Identifier("exception")))
                        .WithAttributes(
                            SingletonList<XmlAttributeSyntax>(
                                XmlCrefAttribute(
                                    NameMemberCref(
                                        IdentifierName(nameof(InvalidOperationException)))))))
                    .WithEndTag(
                        XmlElementEndTag(
                            XmlName(
                                Identifier("exception"))));
                    yield return XmlText()
                    .WithTextTokens(
                        TokenList(
                            XmlTextNewLine(
                                TriviaList(),
                                Environment.NewLine,
                                Environment.NewLine,
                                TriviaList())));
                }

                static IEnumerable<StatementSyntax> GetStatements(int index, IList<string> typeParameterNames)
                {
                    yield return IfStatement(
                        IsPatternExpression(
                            IdentifierName(MapFunctionName),
                            ConstantPattern(
                                LiteralExpression(
                                    SyntaxKind.NullLiteralExpression))),
                        Block(
                            SingletonList<StatementSyntax>(
                                ThrowStatement(
                                    ObjectCreationExpression(
                                        IdentifierName(nameof(ArgumentNullException)))
                                    .WithArgumentList(
                                        ArgumentList(
                                            SingletonSeparatedList(
                                                Argument(
                                                    InvocationExpression(
                                                        IdentifierName(
                                                            Identifier(
                                                                TriviaList(),
                                                                SyntaxKind.NameOfKeyword,
                                                                "nameof",
                                                                "nameof",
                                                                TriviaList())))
                                                    .WithArgumentList(
                                                        ArgumentList(
                                                            SingletonSeparatedList(
                                                                Argument(
                                                                    IdentifierName(MapFunctionName)))))))))))));

                    yield return ReturnStatement(GetSwitchExpression(index, typeParameterNames));

                    static SwitchExpressionSyntax GetSwitchExpression(int index, IList<string> typeParameterNames)
                    {
                        return SwitchExpression(
                            MemberAccessExpression(
                                SyntaxKind.SimpleMemberAccessExpression,
                                ThisExpression(),
                                IdentifierName(IndexPropertyName)))
                        .WithArms(
                            SeparatedList<SwitchExpressionArmSyntax>(GetSwitchExpressionArms(index, typeParameterNames)));

                        static IEnumerable<SyntaxNodeOrToken> GetSwitchExpressionArms(int index, IList<string> typeParameterNames)
                        {
                            for (int i = 0; i < typeParameterNames.Count; i++)
                            {
                                if (i == index)
                                {
                                    yield return SwitchExpressionArm(
                                        ConstantPattern(
                                            LiteralExpression(
                                                SyntaxKind.NumericLiteralExpression,
                                                Literal(i))),
                                        InvocationExpression(
                                            IdentifierName(MapFunctionName))
                                        .WithArgumentList(
                                            ArgumentList(
                                                SingletonSeparatedList(
                                                    Argument(
                                                        MemberAccessExpression(
                                                            SyntaxKind.SimpleMemberAccessExpression,
                                                            ThisExpression(),
                                                            IdentifierName($"As{typeParameterNames[i]}")))))));
                                }
                                else
                                {
                                    yield return SwitchExpressionArm(
                                        ConstantPattern(
                                            LiteralExpression(
                                                SyntaxKind.NumericLiteralExpression,
                                                Literal(i))),
                                        MemberAccessExpression(
                                            SyntaxKind.SimpleMemberAccessExpression,
                                            ThisExpression(),
                                            IdentifierName($"As{typeParameterNames[i]}")));
                                }

                                yield return Token(SyntaxKind.CommaToken);
                            }

                            yield return SwitchExpressionArm(
                                DiscardPattern(),
                                ThrowExpression(
                                    ObjectCreationExpression(
                                        IdentifierName(nameof(InvalidOperationException)))
                                    .WithArgumentList(
                                        ArgumentList())));
                            yield return Token(SyntaxKind.CommaToken);
                        }
                    }
                }
            }
        }

        static IEnumerable<MethodDeclarationSyntax> GetTryPickMethodDeclarations(IList<string> typeParameterNames)
        {
            if (typeParameterNames.Count < 2)
            {
                yield break;
            }

            for (int i = 0; i < typeParameterNames.Count; i++)
            {
                yield return MethodDeclaration(
                    PredefinedType(
                        Token(SyntaxKind.BoolKeyword)),
                    Identifier($"TryPick{typeParameterNames[i]}"))
                .WithModifiers(
                    TokenList(
                        Token(
                            TriviaList(
                                Trivia(
                                    DocumentationCommentTrivia(
                                        SyntaxKind.SingleLineDocumentationCommentTrivia,
                                        List(
                                            new XmlNodeSyntax[]
                                            {
                                                XmlText()
                                                .WithTextTokens(
                                                    TokenList(
                                                        XmlTextLiteral(
                                                            TriviaList(
                                                                DocumentationCommentExterior("///")),
                                                            " ",
                                                            " ",
                                                            TriviaList()))),
                                                XmlExampleElement(
                                                    XmlText()
                                                    .WithTextTokens(
                                                        TokenList(
                                                            XmlTextNewLine(
                                                                TriviaList(),
                                                                Environment.NewLine,
                                                                Environment.NewLine,
                                                                TriviaList()),
                                                            XmlTextLiteral(
                                                                TriviaList(
                                                                    DocumentationCommentExterior("    ///")),
                                                                " Tries to pick the value as a ",
                                                                " Tries to pick the value as a ",
                                                                TriviaList()))),
                                                    XmlNullKeywordElement()
                                                    .WithName(
                                                        XmlName(
                                                            Identifier("typeparamref")))
                                                    .WithAttributes(
                                                        SingletonList<XmlAttributeSyntax>(
                                                            XmlNameAttribute(
                                                                XmlName(
                                                                    Identifier("name")),
                                                                Token(SyntaxKind.DoubleQuoteToken),
                                                                IdentifierName(typeParameterNames[i]),
                                                                Token(SyntaxKind.DoubleQuoteToken)))),
                                                    XmlText()
                                                    .WithTextTokens(
                                                        TokenList(
                                                            XmlTextLiteral(
                                                                TriviaList(),
                                                                ".",
                                                                ".",
                                                                TriviaList()),
                                                            XmlTextNewLine(
                                                                TriviaList(),
                                                                Environment.NewLine,
                                                                Environment.NewLine,
                                                                TriviaList()),
                                                            XmlTextLiteral(
                                                                TriviaList(
                                                                    DocumentationCommentExterior("    ///")),
                                                                " ",
                                                                " ",
                                                                TriviaList()))))
                                                .WithStartTag(
                                                    XmlElementStartTag(
                                                        XmlName(
                                                            Identifier("summary"))))
                                                .WithEndTag(
                                                    XmlElementEndTag(
                                                        XmlName(
                                                            Identifier("summary")))),
                                                XmlText()
                                                .WithTextTokens(
                                                    TokenList(
                                                        XmlTextNewLine(
                                                            TriviaList(),
                                                            Environment.NewLine,
                                                            Environment.NewLine,
                                                            TriviaList()),
                                                        XmlTextLiteral(
                                                            TriviaList(
                                                                DocumentationCommentExterior("    ///")),
                                                            " ",
                                                            " ",
                                                            TriviaList()))),
                                                XmlExampleElement(
                                                    SingletonList<XmlNodeSyntax>(
                                                        XmlText()
                                                        .WithTextTokens(
                                                            TokenList(
                                                                XmlTextLiteral(
                                                                    TriviaList(),
                                                                    "The value.",
                                                                    "The value.",
                                                                    TriviaList())))))
                                                .WithStartTag(
                                                    XmlElementStartTag(
                                                        XmlName(
                                                            Identifier(
                                                                TriviaList(),
                                                                SyntaxKind.ParamKeyword,
                                                                "param",
                                                                "param",
                                                                TriviaList())))
                                                    .WithAttributes(
                                                        SingletonList<XmlAttributeSyntax>(
                                                            XmlNameAttribute(
                                                                XmlName(
                                                                    Identifier("name")),
                                                                Token(SyntaxKind.DoubleQuoteToken),
                                                                IdentifierName(ValueVariableName),
                                                                Token(SyntaxKind.DoubleQuoteToken)))))
                                                .WithEndTag(
                                                    XmlElementEndTag(
                                                        XmlName(
                                                            Identifier(
                                                                TriviaList(),
                                                                SyntaxKind.ParamKeyword,
                                                                "param",
                                                                "param",
                                                                TriviaList())))),
                                                XmlText()
                                                .WithTextTokens(
                                                    TokenList(
                                                        XmlTextNewLine(
                                                            TriviaList(),
                                                            Environment.NewLine,
                                                            Environment.NewLine,
                                                            TriviaList()),
                                                        XmlTextLiteral(
                                                            TriviaList(
                                                                DocumentationCommentExterior("    ///")),
                                                            " ",
                                                            " ",
                                                            TriviaList()))),
                                                XmlExampleElement(
                                                    SingletonList<XmlNodeSyntax>(
                                                        XmlText()
                                                        .WithTextTokens(
                                                            TokenList(
                                                                XmlTextLiteral(
                                                                    TriviaList(),
                                                                    "The remainder.",
                                                                    "The remainder.",
                                                                    TriviaList())))))
                                                .WithStartTag(
                                                    XmlElementStartTag(
                                                        XmlName(
                                                            Identifier(
                                                                TriviaList(),
                                                                SyntaxKind.ParamKeyword,
                                                                "param",
                                                                "param",
                                                                TriviaList())))
                                                    .WithAttributes(
                                                        SingletonList<XmlAttributeSyntax>(
                                                            XmlNameAttribute(
                                                                XmlName(
                                                                    Identifier("name")),
                                                                Token(SyntaxKind.DoubleQuoteToken),
                                                                IdentifierName("remainder"),
                                                                Token(SyntaxKind.DoubleQuoteToken)))))
                                                .WithEndTag(
                                                    XmlElementEndTag(
                                                        XmlName(
                                                            Identifier(
                                                                TriviaList(),
                                                                SyntaxKind.ParamKeyword,
                                                                "param",
                                                                "param",
                                                                TriviaList())))),
                                                XmlText()
                                                .WithTextTokens(
                                                    TokenList(
                                                        XmlTextNewLine(
                                                            TriviaList(),
                                                            Environment.NewLine,
                                                            Environment.NewLine,
                                                            TriviaList()),
                                                        XmlTextLiteral(
                                                            TriviaList(
                                                                DocumentationCommentExterior("    ///")),
                                                            " ",
                                                            " ",
                                                            TriviaList()))),
                                                XmlExampleElement(
                                                    XmlNullKeywordElement()
                                                    .WithAttributes(
                                                        SingletonList<XmlAttributeSyntax>(
                                                            XmlTextAttribute(
                                                                XmlName(
                                                                    Identifier("langword")),
                                                                Token(SyntaxKind.DoubleQuoteToken),
                                                                Token(SyntaxKind.DoubleQuoteToken))
                                                            .WithTextTokens(
                                                                TokenList(
                                                                    XmlTextLiteral(
                                                                        TriviaList(),
                                                                        "true",
                                                                        "true",
                                                                        TriviaList()))))),
                                                    XmlText()
                                                    .WithTextTokens(
                                                        TokenList(
                                                            XmlTextLiteral(
                                                                TriviaList(),
                                                                " upon success; otherwise ",
                                                                " upon success; otherwise ",
                                                                TriviaList()))),
                                                    XmlNullKeywordElement()
                                                    .WithAttributes(
                                                        SingletonList<XmlAttributeSyntax>(
                                                            XmlTextAttribute(
                                                                XmlName(
                                                                    Identifier("langword")),
                                                                Token(SyntaxKind.DoubleQuoteToken),
                                                                Token(SyntaxKind.DoubleQuoteToken))
                                                            .WithTextTokens(
                                                                TokenList(
                                                                    XmlTextLiteral(
                                                                        TriviaList(),
                                                                        "false",
                                                                        "false",
                                                                        TriviaList()))))),
                                                    XmlText()
                                                    .WithTextTokens(
                                                        TokenList(
                                                            XmlTextLiteral(
                                                                TriviaList(),
                                                                ".",
                                                                ".",
                                                                TriviaList()))))
                                                .WithStartTag(
                                                    XmlElementStartTag(
                                                        XmlName(
                                                            Identifier("returns"))))
                                                .WithEndTag(
                                                    XmlElementEndTag(
                                                        XmlName(
                                                            Identifier("returns")))),
                                                XmlText()
                                                .WithTextTokens(
                                                    TokenList(
                                                        XmlTextNewLine(
                                                            TriviaList(),
                                                            Environment.NewLine,
                                                            Environment.NewLine,
                                                            TriviaList()),
                                                        XmlTextLiteral(
                                                            TriviaList(
                                                                DocumentationCommentExterior("    ///")),
                                                            " ",
                                                            " ",
                                                            TriviaList()))),
                                                XmlExampleElement(
                                                    XmlNullKeywordElement()
                                                    .WithAttributes(
                                                        SingletonList<XmlAttributeSyntax>(
                                                            XmlCrefAttribute(
                                                                NameMemberCref(
                                                                    IdentifierName("Index"))))),
                                                    XmlText()
                                                    .WithTextTokens(
                                                        TokenList(
                                                            XmlTextLiteral(
                                                                TriviaList(),
                                                                " is out of range.",
                                                                " is out of range.",
                                                                TriviaList()))))
                                                .WithStartTag(
                                                    XmlElementStartTag(
                                                        XmlName(
                                                            Identifier("exception")))
                                                    .WithAttributes(
                                                        SingletonList<XmlAttributeSyntax>(
                                                            XmlCrefAttribute(
                                                                NameMemberCref(
                                                                    IdentifierName("InvalidOperationException"))))))
                                                .WithEndTag(
                                                    XmlElementEndTag(
                                                        XmlName(
                                                            Identifier("exception")))),
                                                XmlText()
                                                .WithTextTokens(
                                                    TokenList(
                                                        XmlTextNewLine(
                                                            TriviaList(),
                                                            Environment.NewLine,
                                                            Environment.NewLine,
                                                            TriviaList()))),
                                            })))),
                            SyntaxKind.PublicKeyword,
                            TriviaList())))
                .WithParameterList(
                    ParameterList(
                        SeparatedList<ParameterSyntax>(Join(GetParameters(i, typeParameterNames)))))
                .WithBody(
                    Block(
                        GetStatements(i, typeParameterNames)));

                static IEnumerable<ParameterSyntax> GetParameters(int index, IList<string> typeParameterNames)
                {
                    yield return Parameter(
                        Identifier(ValueVariableName))
                    .WithModifiers(
                        TokenList(
                            Token(SyntaxKind.OutKeyword)))
                    .WithType(
                        NullableType(
                            IdentifierName(typeParameterNames[index])));
                    yield return Parameter(
                        Identifier("remainder"))
                    .WithModifiers(
                        TokenList(
                            Token(SyntaxKind.OutKeyword)))
                    .WithType(
                        GenericName(
                            Identifier(OneOf))
                        .WithTypeArgumentList(
                            TypeArgumentList(
                                SeparatedList<TypeSyntax>(
                                    Join(typeParameterNames.Where((_, i) => i != index).Select(IdentifierName))))));
                }

                static IEnumerable<StatementSyntax> GetStatements(int index, IList<string> typeParameterNames)
                {
                    yield return ExpressionStatement(
                        AssignmentExpression(
                            SyntaxKind.SimpleAssignmentExpression,
                            IdentifierName(ValueVariableName),
                            ConditionalExpression(
                                MemberAccessExpression(
                                    SyntaxKind.SimpleMemberAccessExpression,
                                    ThisExpression(),
                                    IdentifierName($"Is{typeParameterNames[index]}")),
                                MemberAccessExpression(
                                    SyntaxKind.SimpleMemberAccessExpression,
                                    ThisExpression(),
                                    IdentifierName($"As{typeParameterNames[index]}")),
                                LiteralExpression(
                                    SyntaxKind.DefaultLiteralExpression,
                                    Token(SyntaxKind.DefaultKeyword)))));
                    yield return ExpressionStatement(
                        AssignmentExpression(
                            SyntaxKind.SimpleAssignmentExpression,
                            IdentifierName("remainder"),
                            SwitchExpression(
                                MemberAccessExpression(
                                    SyntaxKind.SimpleMemberAccessExpression,
                                    ThisExpression(),
                                    IdentifierName(IndexPropertyName)))
                            .WithArms(
                                SeparatedList<SwitchExpressionArmSyntax>(GetSwitchExpressionArms(index, typeParameterNames)))));
                    yield return ReturnStatement(
                        MemberAccessExpression(
                            SyntaxKind.SimpleMemberAccessExpression,
                            ThisExpression(),
                            IdentifierName($"Is{typeParameterNames[index]}")));

                    static IEnumerable<SyntaxNodeOrToken> GetSwitchExpressionArms(int index, IList<string> typeParameterNames)
                    {
                        for (int i = 0; i < typeParameterNames.Count; i++)
                        {
                            if (i == index)
                            {
                                yield return SwitchExpressionArm(
                                    ConstantPattern(
                                        LiteralExpression(
                                            SyntaxKind.NumericLiteralExpression,
                                            Literal(i))),
                                    LiteralExpression(
                                        SyntaxKind.DefaultLiteralExpression,
                                        Token(SyntaxKind.DefaultKeyword)));
                            }
                            else
                            {
                                yield return SwitchExpressionArm(
                                    ConstantPattern(
                                        LiteralExpression(
                                            SyntaxKind.NumericLiteralExpression,
                                            Literal(i))),
                                    MemberAccessExpression(
                                        SyntaxKind.SimpleMemberAccessExpression,
                                        ThisExpression(),
                                        IdentifierName($"As{typeParameterNames[i]}")));
                            }

                            yield return Token(SyntaxKind.CommaToken);
                        }

                        yield return SwitchExpressionArm(
                            DiscardPattern(),
                            ThrowExpression(
                                ObjectCreationExpression(
                                    IdentifierName(nameof(InvalidOperationException)))
                                .WithArgumentList(
                                    ArgumentList())));
                        yield return Token(SyntaxKind.CommaToken);
                    }
                }
            }
        }

        static IEnumerable<MethodDeclarationSyntax> GetEqualsMethodDeclarations(IList<string> typeParameterNames)
        {
            yield return MethodDeclaration(
                    PredefinedType(
                        Token(SyntaxKind.BoolKeyword)),
                    Identifier(nameof(object.Equals)))
                .WithModifiers(
                    TokenList(
                        Token(
                            TriviaList(
                                Trivia(
                                    DocumentationCommentTrivia(
                                        SyntaxKind.SingleLineDocumentationCommentTrivia,
                                        List(
                                            new XmlNodeSyntax[]
                                            {
                                                XmlText()
                                                .WithTextTokens(
                                                    TokenList(
                                                        XmlTextLiteral(
                                                            TriviaList(
                                                                DocumentationCommentExterior("///")),
                                                            " ",
                                                            " ",
                                                            TriviaList()))),
                                                XmlEmptyElement("inheritdoc"),
                                                XmlText()
                                                .WithTextTokens(
                                                    TokenList(
                                                        XmlTextNewLine(
                                                            TriviaList(),
                                                            Environment.NewLine,
                                                            Environment.NewLine,
                                                            TriviaList()))),
                                            })))),
                            SyntaxKind.PublicKeyword,
                            TriviaList())))
                .WithParameterList(
                    ParameterList(
                        SingletonSeparatedList(
                            Parameter(
                                Identifier(OtherVariableName))
                            .WithType(
                                GenericName(
                                    Identifier(OneOf))
                                .WithTypeArgumentList(
                                    TypeArgumentList(
                                        SeparatedList<TypeSyntax>(
                                            Join(typeParameterNames.Select(IdentifierName)))))))))
                .WithExpressionBody(
                    ArrowExpressionClause(
                        BinaryExpression(
                            SyntaxKind.LogicalAndExpression,
                            BinaryExpression(
                                SyntaxKind.EqualsExpression,
                                MemberAccessExpression(
                                    SyntaxKind.SimpleMemberAccessExpression,
                                    ThisExpression(),
                                    IdentifierName(IndexPropertyName)),
                                MemberAccessExpression(
                                    SyntaxKind.SimpleMemberAccessExpression,
                                    IdentifierName(OtherVariableName),
                                    IdentifierName(IndexPropertyName))),
                            GetSwitchExpression(typeParameterNames))))
                .WithSemicolonToken(
                    Token(SyntaxKind.SemicolonToken));

            yield return MethodDeclaration(
                    PredefinedType(
                        Token(SyntaxKind.BoolKeyword)),
                    Identifier(nameof(Equals)))
                .WithModifiers(
                    TokenList(
                        Token(
                            TriviaList(
                                Trivia(
                                    DocumentationCommentTrivia(
                                        SyntaxKind.SingleLineDocumentationCommentTrivia,
                                        List(
                                            new XmlNodeSyntax[]
                                            {
                                                XmlText()
                                                .WithTextTokens(
                                                    TokenList(
                                                        XmlTextLiteral(
                                                            TriviaList(
                                                                DocumentationCommentExterior("///")),
                                                            " ",
                                                            " ",
                                                            TriviaList()))),
                                                XmlEmptyElement("inheritdoc"),
                                                XmlText()
                                                .WithTextTokens(
                                                    TokenList(
                                                        XmlTextNewLine(
                                                            TriviaList(),
                                                            Environment.NewLine,
                                                            Environment.NewLine,
                                                            TriviaList()))),
                                            })))),
                            SyntaxKind.PublicKeyword,
                            TriviaList()),
                        Token(SyntaxKind.OverrideKeyword)))
                .WithParameterList(
                    ParameterList(
                        SingletonSeparatedList(
                            Parameter(
                                Identifier("obj"))
                            .WithType(
                                NullableType(
                                    PredefinedType(
                                        Token(SyntaxKind.ObjectKeyword)))))))
                .WithExpressionBody(
                    ArrowExpressionClause(
                        BinaryExpression(
                            SyntaxKind.LogicalAndExpression,
                            IsPatternExpression(
                                IdentifierName("obj"),
                                DeclarationPattern(
                                    GenericName(
                                        Identifier(OneOf))
                                    .WithTypeArgumentList(
                                        TypeArgumentList(
                                            SeparatedList<TypeSyntax>(
                                                Join(typeParameterNames.Select(IdentifierName))))),
                                    SingleVariableDesignation(
                                        Identifier("o")))),
                            InvocationExpression(
                                MemberAccessExpression(
                                    SyntaxKind.SimpleMemberAccessExpression,
                                    ThisExpression(),
                                    IdentifierName(nameof(object.Equals))))
                            .WithArgumentList(
                                ArgumentList(
                                    SingletonSeparatedList(
                                        Argument(
                                            IdentifierName("o"))))))))
                .WithSemicolonToken(
                    Token(SyntaxKind.SemicolonToken));

            static SwitchExpressionSyntax GetSwitchExpression(IList<string> typeParameterNames)
            {
                return SwitchExpression(
                    MemberAccessExpression(
                        SyntaxKind.SimpleMemberAccessExpression,
                        ThisExpression(),
                        IdentifierName(IndexPropertyName)))
                .WithArms(
                    SeparatedList<SwitchExpressionArmSyntax>(
                        GetSwitchExpressionArms(typeParameterNames)));

                static IEnumerable<SyntaxNodeOrToken> GetSwitchExpressionArms(IList<string> typeParameterNames)
                {
                    for (int i = 0; i < typeParameterNames.Count; i++)
                    {
                        yield return SwitchExpressionArm(
                            ConstantPattern(
                                LiteralExpression(
                                    SyntaxKind.NumericLiteralExpression,
                                    Literal(i))),
                            InvocationExpression(
                                IdentifierName(nameof(object.Equals)))
                            .WithArgumentList(
                                ArgumentList(
                                    SeparatedList<ArgumentSyntax>(
                                        new SyntaxNodeOrToken[]
                                        {
                                            Argument(
                                                MemberAccessExpression(
                                                    SyntaxKind.SimpleMemberAccessExpression,
                                                    ThisExpression(),
                                                    IdentifierName(GetValueName(i)))),
                                            Token(SyntaxKind.CommaToken),
                                            Argument(
                                                MemberAccessExpression(
                                                    SyntaxKind.SimpleMemberAccessExpression,
                                                    IdentifierName(OtherVariableName),
                                                    IdentifierName(GetValueName(i)))),
                                        }))));
                        yield return Token(SyntaxKind.CommaToken);
                    }

                    yield return SwitchExpressionArm(
                        DiscardPattern(),
                        LiteralExpression(
                            SyntaxKind.FalseLiteralExpression));
                    yield return Token(SyntaxKind.CommaToken);
                }
            }
        }

        static MethodDeclarationSyntax GetToStringMethodDeclaration(IList<string> typeParameterNames)
        {
            const string FormatValue = nameof(FormatValue);

            return MethodDeclaration(
                NullableType(
                    PredefinedType(
                        Token(SyntaxKind.StringKeyword))),
                Identifier(nameof(ToString)))
            .WithModifiers(
                TokenList(
                    Token(
                        TriviaList(
                            Trivia(
                                DocumentationCommentTrivia(
                                    SyntaxKind.SingleLineDocumentationCommentTrivia,
                                    List(
                                        new XmlNodeSyntax[]
                                        {
                                            XmlText()
                                            .WithTextTokens(
                                                TokenList(
                                                    XmlTextLiteral(
                                                        TriviaList(
                                                            DocumentationCommentExterior("///")),
                                                        " ",
                                                        " ",
                                                        TriviaList()))),
                                            XmlEmptyElement("inheritdoc"),
                                            XmlText()
                                            .WithTextTokens(
                                                TokenList(
                                                    XmlTextNewLine(
                                                        TriviaList(),
                                                        Environment.NewLine,
                                                        Environment.NewLine,
                                                        TriviaList()))),
                                        })))),
                        SyntaxKind.PublicKeyword,
                        TriviaList()),
                    Token(SyntaxKind.OverrideKeyword)))
            .WithBody(
                Block(
                    ReturnStatement(
                        SwitchExpression(
                            MemberAccessExpression(
                                SyntaxKind.SimpleMemberAccessExpression,
                                ThisExpression(),
                                IdentifierName(IndexPropertyName)))
                        .WithArms(
                            SeparatedList<SwitchExpressionArmSyntax>(
                                GetSwitchExpressionArms(typeParameterNames)))),
                    LocalFunctionStatement(
                        PredefinedType(
                            Token(SyntaxKind.StringKeyword)),
                        Identifier(FormatValue))
                    .WithModifiers(
                        TokenList(
                            Token(SyntaxKind.StaticKeyword)))
                    .WithTypeParameterList(
                        TypeParameterList(
                            SingletonSeparatedList(
                                TypeParameter(
                                    Identifier("T")))))
                    .WithParameterList(
                        ParameterList(
                            SingletonSeparatedList(
                                Parameter(
                                    Identifier(ValueVariableName))
                                .WithType(
                                    IdentifierName("T")))))
                    .WithBody(
                        Block(
                            SingletonList<StatementSyntax>(
                                ReturnStatement(
                                    InterpolatedStringExpression(
                                        Token(SyntaxKind.InterpolatedStringStartToken))
                                    .WithContents(
                                        List(
                                            new InterpolatedStringContentSyntax[]
                                            {
                                                Interpolation(
                                                    MemberAccessExpression(
                                                        SyntaxKind.SimpleMemberAccessExpression,
                                                        TypeOfExpression(
                                                            IdentifierName("T")),
                                                        IdentifierName(nameof(Type.FullName)))),
                                                InterpolatedStringText()
                                                .WithTextToken(
                                                    Token(
                                                        TriviaList(),
                                                        SyntaxKind.InterpolatedStringTextToken,
                                                        ": ",
                                                        ": ",
                                                        TriviaList())),
                                                Interpolation(
                                                    ConditionalAccessExpression(
                                                        IdentifierName(ValueVariableName),
                                                        InvocationExpression(
                                                            MemberBindingExpression(
                                                                IdentifierName(nameof(ToString)))))),
                                            }))))))));

            static IEnumerable<SyntaxNodeOrToken> GetSwitchExpressionArms(IList<string> typeParameterNames)
            {
                for (int i = 0; i < typeParameterNames.Count; i++)
                {
                    yield return SwitchExpressionArm(
                        ConstantPattern(
                            LiteralExpression(
                                SyntaxKind.NumericLiteralExpression,
                                Literal(i))),
                        InvocationExpression(
                            IdentifierName(FormatValue))
                        .WithArgumentList(
                            ArgumentList(
                                SingletonSeparatedList(
                                    Argument(
                                        MemberAccessExpression(
                                            SyntaxKind.SimpleMemberAccessExpression,
                                            ThisExpression(),
                                            IdentifierName(GetValueName(i))))))));
                    yield return Token(SyntaxKind.CommaToken);
                }

                yield return SwitchExpressionArm(
                    DiscardPattern(),
                    LiteralExpression(
                        SyntaxKind.DefaultLiteralExpression,
                        Token(SyntaxKind.DefaultKeyword)));
                yield return Token(SyntaxKind.CommaToken);
            }
        }

        static MethodDeclarationSyntax GetGetHashCodeMethodDefinition(IList<string> typeParameterNames)
        {
            return MethodDeclaration(
                PredefinedType(
                    Token(SyntaxKind.IntKeyword)),
                Identifier(nameof(GetHashCode)))
            .WithModifiers(
                TokenList(
                    Token(
                        TriviaList(
                            Trivia(
                                DocumentationCommentTrivia(
                                    SyntaxKind.SingleLineDocumentationCommentTrivia,
                                    List(
                                        new XmlNodeSyntax[]
                                        {
                                            XmlText()
                                            .WithTextTokens(
                                                TokenList(
                                                    XmlTextLiteral(
                                                        TriviaList(
                                                            DocumentationCommentExterior("///")),
                                                        " ",
                                                        " ",
                                                        TriviaList()))),
                                            XmlEmptyElement("inheritdoc"),
                                            XmlText()
                                            .WithTextTokens(
                                                TokenList(
                                                    XmlTextNewLine(
                                                        TriviaList(),
                                                        Environment.NewLine,
                                                        Environment.NewLine,
                                                        TriviaList()))),
                                        })))),
                        SyntaxKind.PublicKeyword,
                        TriviaList()),
                    Token(SyntaxKind.OverrideKeyword)))
            .WithBody(
                Block(
                    SingletonList<StatementSyntax>(
                        CheckedStatement(
                            SyntaxKind.UncheckedStatement,
                            Block(
                                ReturnStatement(
                                    BinaryExpression(
                                        SyntaxKind.ExclusiveOrExpression,
                                        ParenthesizedExpression(
                                            BinaryExpression(
                                                SyntaxKind.MultiplyExpression,
                                                InvocationExpression(
                                                    IdentifierName(nameof(GetHashCode) + "Core"))
                                                .WithArgumentList(
                                                    ArgumentList(
                                                        SeparatedList<ArgumentSyntax>(
                                                            Join(GetArguments(typeParameterNames))))),
                                                LiteralExpression(
                                                    SyntaxKind.NumericLiteralExpression,
                                                    Literal(397)))),
                                        MemberAccessExpression(
                                            SyntaxKind.SimpleMemberAccessExpression,
                                            ThisExpression(),
                                            IdentifierName(IndexPropertyName)))),
                                LocalFunctionStatement(
                                    PredefinedType(
                                        Token(SyntaxKind.IntKeyword)),
                                    Identifier(nameof(GetHashCode) + "Core"))
                                .WithModifiers(
                                    TokenList(
                                        Token(SyntaxKind.StaticKeyword)))
                                .WithParameterList(
                                    ParameterList(
                                        SeparatedList<ParameterSyntax>(
                                            Join(GetParameters(typeParameterNames)))))
                                .WithBody(
                                    Block(
                                        LocalDeclarationStatement(
                                            VariableDeclaration(
                                                IdentifierName(
                                                    Identifier(
                                                        TriviaList(),
                                                        SyntaxKind.VarKeyword,
                                                        "var",
                                                        "var",
                                                        TriviaList())))
                                            .WithVariables(
                                                SingletonSeparatedList(
                                                    VariableDeclarator(
                                                        Identifier("hashCode"))
                                                    .WithInitializer(
                                                        EqualsValueClause(
                                                            SwitchExpression(
                                                                IdentifierName(IndexVariableName))
                                                            .WithArms(
                                                                SeparatedList<SwitchExpressionArmSyntax>(
                                                                    GetSwitchExpressionArms(typeParameterNames)))))))),
                                        ReturnStatement(
                                            BinaryExpression(
                                                SyntaxKind.CoalesceExpression,
                                                IdentifierName("hashCode"),
                                                LiteralExpression(
                                                    SyntaxKind.NumericLiteralExpression,
                                                    Literal(0)))))))))));

            static IEnumerable<ParameterSyntax> GetParameters(IList<string> typeParameterNames)
            {
                yield return Parameter(
                    Identifier(IndexVariableName))
                .WithType(
                    PredefinedType(
                        Token(SyntaxKind.IntKeyword)));

                for (int i = 0; i < typeParameterNames.Count; i++)
                {
                    yield return Parameter(
                        Identifier(GetValueName(i)))
                    .WithType(
                        NullableType(
                            IdentifierName(typeParameterNames[i])));
                }
            }

            static IEnumerable<ArgumentSyntax> GetArguments(IList<string> typeParameterNames)
            {
                yield return Argument(
                    MemberAccessExpression(
                        SyntaxKind.SimpleMemberAccessExpression,
                        ThisExpression(),
                        IdentifierName(IndexPropertyName)));

                for (int i = 0; i < typeParameterNames.Count; i++)
                {
                    yield return Argument(
                        MemberAccessExpression(
                            SyntaxKind.SimpleMemberAccessExpression,
                            ThisExpression(),
                            IdentifierName(GetValueName(i))));
                }
            }

            static IEnumerable<SyntaxNodeOrToken> GetSwitchExpressionArms(IList<string> typeParameterNames)
            {
                for (int i = 0; i < typeParameterNames.Count; i++)
                {
                    yield return SwitchExpressionArm(
                        ConstantPattern(
                            LiteralExpression(
                                SyntaxKind.NumericLiteralExpression,
                                Literal(i))),
                        ConditionalAccessExpression(
                            IdentifierName(GetValueName(i)),
                            InvocationExpression(
                                MemberBindingExpression(
                                    IdentifierName(nameof(GetHashCode))))));
                    yield return Token(SyntaxKind.CommaToken);
                }

                yield return SwitchExpressionArm(
                    DiscardPattern(),
                    LiteralExpression(
                        SyntaxKind.DefaultLiteralExpression,
                        Token(SyntaxKind.DefaultKeyword)));
                yield return Token(SyntaxKind.CommaToken);
            }
        }

        static IdentifierNameSyntax GetValueIdentifierName(int number)
        {
            return IdentifierName(GetValueName(number));
        }

        static string GetValueName(int number)
        {
            return GetName(ValueVariableName, number);
        }

        static string GetFunctionName(int number)
        {
            return GetName("f", number);
        }

        static NameSyntax GetQualifiedName(Type type)
        {
            var enumerator = GetNames(type).GetEnumerator();
            enumerator.MoveNext();

            NameSyntax name = enumerator.Current;
            while (enumerator.MoveNext())
            {
                name = QualifiedName(name, enumerator.Current);
            }

            return name;
        }

        static MemberAccessExpressionSyntax GetMemberAccessExpression<T>(T value)
            where T : Enum
        {
            return MemberAccessExpression(
                SyntaxKind.SimpleMemberAccessExpression,
                GetBaseMemberAccessExpression(GetNames(typeof(T)).ToList()),
                IdentifierName(Enum.GetName(typeof(T), value)));

            static MemberAccessExpressionSyntax GetBaseMemberAccessExpression(IList<IdentifierNameSyntax> names)
            {
                var memberAccessExpression = MemberAccessExpression(
                    SyntaxKind.SimpleMemberAccessExpression,
                    names[0],
                    names[1]);

                for (var i = 2; i < names.Count; i++)
                {
                    memberAccessExpression = MemberAccessExpression(
                        SyntaxKind.SimpleMemberAccessExpression,
                        memberAccessExpression,
                        names[i]);
                }

                return memberAccessExpression;
            }
        }

        static IEnumerable<IdentifierNameSyntax> GetNames(Type type)
        {
            return type.FullName.Split('.').Select(RemoveAttribute).Select(IdentifierName);

            static string RemoveAttribute(string x)
            {
                if (x.EndsWith(nameof(Attribute), StringComparison.Ordinal))
                {
                    return x[..^nameof(Attribute).Length];
                }

                return x;
            }
        }
    }

    private static IEnumerable<string> GetTypeParameterNames(int count)
    {
        return Enumerable.Range(0, count).Select(GetTypeParameterName);
    }

    static string GetTypeParameterName(int number)
    {
        return GetName("T", number);
    }

    static string GetName(string name, int number)
    {
        return FormattableString.Invariant($"{name}{number}");
    }

    private static IEnumerable<SyntaxNodeOrToken> Join<TNode>(IEnumerable<TNode> source)
        where TNode : SyntaxNode
    {
        var enumerator = source.GetEnumerator();
        if (enumerator.MoveNext())
        {
            yield return enumerator.Current;
        }

        while (enumerator.MoveNext())
        {
            yield return Token(SyntaxKind.CommaToken);
            yield return enumerator.Current;
        }
    }
}