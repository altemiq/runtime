<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>net5.0;netstandard2.0;netstandard1.6;net47;net451</TargetFrameworks>
    <RootNamespace Condition="$(RootNamespace.Contains('.Runtime'))">$(RootNamespace.Replace('.Runtime', ''))</RootNamespace>
    <PackageReadmeFile>README.md</PackageReadmeFile>
  </PropertyGroup>

  <ItemGroup>
    <EmbeddedResource Include="Runtime\*.json" Generator="" />
    <None Include="**\*.gz" DependentUpon="$([System.String]::Copy('%(Filename)'))" />
    <None Include="README.md" Pack="true" PackagePath="\" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.DotNet.PlatformAbstractions" Condition=" !($([MSBuild]::GetTargetFrameworkIdentifier('$(TargetFramework)')) == '.NETCoreApp' and $([MSBuild]::VersionGreaterThanOrEquals($([MSBuild]::GetTargetFrameworkVersion('$(TargetFramework)')), '5.0'))) " />
    <PackageReference Include="Microsoft.Extensions.DependencyModel" />
    <PackageReference Include="NuGet.Frameworks" />
    <PackageReference Update="NuGet.Frameworks" VersionOverride="5.6.0" Condition=" ($([MSBuild]::GetTargetFrameworkIdentifier('$(TargetFramework)')) == '.NETCoreApp' and $([MSBuild]::VersionGreaterThanOrEquals($([MSBuild]::GetTargetFrameworkVersion('$(TargetFramework)')), '5.0'))) OR ($([MSBuild]::GetTargetFrameworkIdentifier('$(TargetFramework)')) == '.NETStandard' and $([MSBuild]::VersionGreaterThanOrEquals($([MSBuild]::GetTargetFrameworkVersion('$(TargetFramework)')), '2.0')))" />
  </ItemGroup>

  <ItemGroup>
    <Using Remove="System.Net.Http" />
  </ItemGroup>

  <ItemGroup Condition=" '$(SignAssembly)' != 'true' ">
    <InternalsVisibleTo Include="$(AssemblyName).Tests" />
  </ItemGroup>

  <UsingTask TaskName="GZip" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <Files ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <Result ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.IO" />
      <Using Namespace="System.IO.Compression" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
if (Files.Length > 0)
{
    Result = new TaskItem[Files.Length];
    for (var i = 0; i < Files.Length; i++)
    {
        var item = Files[i];
        var sourcePath = item.GetMetadata("FullPath");
        var sourceItemSpec = item.ItemSpec;

        var destinationSuffix = ".gz";
        var destinationPath = sourcePath + destinationSuffix;
        var destinationItemSpec = sourceItemSpec + destinationSuffix;

        if (!File.Exists(destinationItemSpec))
        {
            Log.LogMessage(MessageImportance.Normal, "EmbeddedResource Src : " + sourceItemSpec);

            using (var sourceStream = File.OpenRead(sourcePath))
            {
                using (var destinationStream = File.OpenWrite(destinationPath))
                {
                    using (var destinationGZip = new GZipStream(destinationStream, CompressionLevel.Optimal))
                    {
                        sourceStream.CopyTo(destinationGZip);
                    }
                }
            }
        }

        var destinationItem = new TaskItem(destinationItemSpec);

        Log.LogMessage(MessageImportance.Normal, "EmbeddedResource GZip: " + destinationItem.ItemSpec);

        Result[i] = destinationItem;
    }
}
]]>
      </Code>
    </Task>
  </UsingTask>

  <Target Name="ZipResources" BeforeTargets="BeforeBuild">
    <GZip Files="@(EmbeddedResource)">
      <Output ItemName="GZipEmbeddedResource" TaskParameter="Result" />
    </GZip>
    <Message Text="Source EmbeddedResources: @(EmbeddedResource)" />
    <Message Text="GZipped EmbeddedResources: @(GZipEmbeddedResource)" />
    <ItemGroup>
      <EmbeddedResource Remove="@(EmbeddedResource)" />
      <EmbeddedResource Include="@(GZipEmbeddedResource)" />
    </ItemGroup>
  </Target>

</Project>
